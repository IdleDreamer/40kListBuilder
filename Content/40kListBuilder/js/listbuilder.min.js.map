{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/data/dataController.ts","src/data/factions.ts","src/editor/editor.ts","src/init.ts","src/lists/armyList.ts","src/lists/factionList.ts","src/lists/unitList.ts","src/objects/availableUnit.ts","src/settings.ts","src/utils/costController.ts"],"names":["f","exports","module","define","amd","window","global","self","this","listbuilder","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","factions_1","__importDefault","settings_1","Data","success","failure","filesLoaded","data","prototype","loadFactionData","_this","faction","default","supportedFactions","indexOf","json","dataFile","request_1","XMLHttpRequest","onload","onFileLoaded","JSON","parse","response","onerror","onFileFailed","open","send","name","jsonData","Adeptus Custodes","icon","Adeptus Mechanicus","Astra Militarum","Blood Angels","Chaos Daemons","Chaos Space Marines","Craftworlds","Dark Angels","Death Guard","Deathwatch","Drukhari","Grey Knights","Harlequins","Imperial Knights","Necrons","Orks","Space Marines","T'au Empire","Thousand Sons","Tyranids","Ynnari","Editor","dataController_1","costController_1","factionList_1","unitList_1","armyList_1","editor_1","ListBuilder","setup","loadingFailure","costs","factionList","unitList","armyList","editor","alert","ArmyList","addUnit","id","type","removeUnit","idString","addSmiteSpell","addFactionSpells","spells","init_1","FactionList","menuBtn","document","getElementById","setupFactionList","openNav","style","width","marginLeft","paddingLeft","closeNav","toggleNav","isOpen","onclick","appendChild","createFactionListElement","supported","listItem","createElement","className","factionSelected","innerHTML","availableUnit_1","UnitList","currentFaction","availableList","factionData","units","unit","push","renderList","availableListHTML","containingList","typeList","currentType","unitId","points","power","wounds","models","_i","_a","undefined","spellsList","smite","spellType","this_1","spellItem","spacer","AvailableUnit","unitInfo","getPointsValue","getPowerValue","getWoundsValue","getModelsValue","modelTypes","modelType","modelPoints","model","Points","PointsIncludesWargear","Wargear","weapons","weapon","wargear","defaultAmount","W","Costs","pointsElement","powerElement","woundsElement","modelsElement","updateCosts"],"mappings":"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","file":"listbuilder.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","import Factions from '../data/factions';\r\nimport Settings from '../settings';\r\n\r\ninterface DataCollection {\r\n  [key: string]: any;\r\n}\r\n\r\nexport default class Data {\r\n\r\n  public data: DataCollection;\r\n  private filesLoaded: number;\r\n  private success: Function;\r\n  private failure: Function;\r\n\r\n  constructor(success: Function, failure: Function) {\r\n    this.filesLoaded = 0;\r\n    this.success = success;\r\n    this.failure = failure;\r\n    this.data = {};\r\n  }\r\n\r\n  public loadFactionData() {\r\n    for (let faction in Factions) {\r\n      if (Settings.supportedFactions.indexOf(faction) > -1) {\r\n        let json = Factions[faction].dataFile;\r\n        let request = new XMLHttpRequest();\r\n        request.onload = () => {\r\n          this.onFileLoaded(faction, JSON.parse(request.response));\r\n        };\r\n        request.onerror = () => {\r\n          this.onFileFailed();\r\n        };\r\n        request.open('get', '/Content/40kListBuilder/resources/data/' + json);\r\n        request.send();\r\n      }\r\n    }\r\n  }\r\n\r\n  private onFileLoaded(name: string, jsonData: Object) {\r\n    this.filesLoaded++;\r\n    this.data[name] = jsonData;\r\n    if (this.filesLoaded === Settings.supportedFactions.length) {\r\n      this.success();\r\n    }\r\n  }\r\n\r\n  private onFileFailed() {\r\n    this.failure();\r\n  }\r\n}\r\n","// TODO: should just be a list of names, icons, and file locations\r\n\r\nlet factions = {\r\n  \"Adeptus Custodes\": {\r\n    \"dataFile\": \"AdeptusCustodes.json\",\r\n    \"icon\": \"talonsoftheemperor.png\"\r\n  },\r\n  \"Adeptus Mechanicus\": {\r\n    \"dataFile\": \"AdeptusMechanicus.json\",\r\n    \"icon\": \"adeptusmechanicus.png\"\r\n  },\r\n  \"Astra Militarum\": {\r\n    \"dataFile\": \"AstraMilitarum.json\",\r\n    \"icon\": \"astramilitarum.png\"\r\n  },\r\n  \"Blood Angels\": {\r\n    \"dataFile\": \"BloodAngles.json\",\r\n    \"icon\": \"bloodangels.png\"\r\n  },\r\n  \"Chaos Daemons\": {\r\n    \"dataFile\": \"Chaosaemons.json\",\r\n    \"icon\": \"chaosdaemons.png\"\r\n  },\r\n  \"Chaos Space Marines\": {\r\n    \"dataFile\": \"ChaosSpaceMarines.json\",\r\n    \"icon\": \"chaosdaemons.png\"\r\n  },\r\n  \"Craftworlds\": {\r\n    \"dataFile\": \"Craftworlds.json\",\r\n    \"icon\": \"craftworld.png\"\r\n  },\r\n  \"Dark Angels\": {\r\n    \"dataFile\": \"DarkAngles.json\",\r\n    \"icon\": \"darkangels.png\"\r\n  },\r\n  \"Death Guard\": {\r\n    \"dataFile\": \"DeathGuard.json\",\r\n    \"icon\": \"deathwatch.png\"\r\n  },\r\n  \"Deathwatch\": {\r\n    \"dataFile\": \"Deathwatch.json\",\r\n    \"icon\": \"hereticastartes.png\"\r\n  },\r\n  \"Drukhari\": {\r\n    \"dataFile\": \"Drukhari.json\",\r\n    \"icon\": \"drukhari.png\"\r\n  },\r\n  \"Grey Knights\": {\r\n    \"dataFile\": \"GreyKnights.json\",\r\n    \"icon\": \"greyknights.png\"\r\n  },\r\n  \"Harlequins\": {\r\n    \"dataFile\": \"Harlequins.json\",\r\n    \"icon\": \"harlequins.png\"\r\n  },\r\n  \"Imperial Knights\": {\r\n    \"dataFile\": \"ImperialKnights.json\",\r\n    \"icon\": \"imperialknights.png\"\r\n  },\r\n  \"Necrons\": {\r\n    \"dataFile\": \"Necrons.json\",\r\n    \"icon\": \"necrons.png\"\r\n  },\r\n  \"Orks\": {\r\n    \"dataFile\": \"Orks.json\",\r\n    \"icon\": \"orks.png\"\r\n  },\r\n  \"Space Marines\": {\r\n    \"dataFile\": \"SpaceMarines.json\",\r\n    \"icon\": \"spacemarines.png\"\r\n  },\r\n  \"T'au Empire\": {\r\n    \"dataFile\": \"TauEmpire.json\",\r\n    \"icon\": \"tau.png\"\r\n  },\r\n  \"Thousand Sons\": {\r\n    \"dataFile\": \"ThousandSons.json\",\r\n    \"icon\": \"hereticastartes.png\"\r\n  },\r\n  \"Tyranids\": {\r\n    \"dataFile\": \"Tyranids.json\",\r\n    \"icon\": \"tyranids.png\"\r\n  },\r\n  \"Ynnari\": {\r\n    \"dataFile\": \"Ynnari.json\",\r\n    \"icon\": \"ynnari.png\"\r\n  }\r\n};\r\n\r\nexport default factions;\r\n","export default class Editor {\r\n\r\n  // TODO - a lot of this can now be done via the unit class\r\n\r\n  /* constructor() {\r\n    this.editorContainerHtml = document.getElementById(\"editor\");\r\n    this.editorHtml = document.getElementById(\"editorForm\");\r\n    this.editorContainerHtml.style.width = '0px';\r\n    this.active = false;\r\n  }\r\n\r\n  editUnit(id) {\r\n    for (var type in listContents) {\r\n      for (var unit in listContents[type]) {\r\n        if (listContents[type][unit].id === id) {\r\n          this.unit = listContents[type][unit];\r\n          this.renderEdit();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderEdit() {\r\n    this.active = true;\r\n    this.editorContainerHtml.style.width = '100%';\r\n    var editFields = this.editorHtml.innerHTML;\r\n    editFields = '';\r\n\r\n    editFields += '<table class=\"editTable\">';\r\n    editFields += this.getUnitNameAndCostHTML(this.unit);\r\n\r\n    let globalMax = this.unit.unitInfo.modelTypes[0].maxAmount;\r\n    let globalMin = this.unit.unitInfo.modelTypes[0].defaultAmount;\r\n    let totalModels = 0;\r\n    for (var i = 0; i < this.unit.unitInfo.modelTypes.length; i++) {\r\n      totalModels += this.unit.models[this.unit.unitInfo.modelTypes[i].model].length;\r\n    }\r\n\r\n    for (var i = 0; i < this.unit.unitInfo.modelTypes.length; i++) {\r\n      editFields += this.getModelTypeHTML(this.unit.unitInfo.modelTypes[i].model);\r\n      var models = this.unit.models[this.unit.unitInfo.modelTypes[i].model];\r\n      var max = this.unit.unitInfo.modelTypes[i].maxAmount;\r\n      if (models) {\r\n        for (var model in models) {\r\n          editFields += this.unit.getStatsHeadersHTML();\r\n          editFields += this.getModelStatsHTML(this.unit, models[model]);\r\n          editFields += this.unit.getWeaponsHeadersHTML();\r\n          editFields += this.getWeaponsHTML(models[model], this.unit.faction);\r\n          editFields += this.getWeaponLoadoutSelectionHTML(i, model, models[model]);\r\n          editFields += this.getSeperatorHTML();\r\n        }\r\n        let canAdd = (totalModels < globalMax && models.length < max);\r\n        let canRemove = (totalModels > globalMin && models.length > 0);\r\n        editFields += this.getButtonRowHTML(canAdd, canRemove, i);\r\n        editFields += this.getSeperatorHTML();\r\n      }\r\n    }\r\n\r\n    let allegianceHTML = this.getAllegianceHTML(this.unit);\r\n    if (allegianceHTML !== '') {\r\n      editFields += '<tr><td class=\"modelType\" colspan=\"11\">Allegiance</td></tr>'\r\n      editFields += allegianceHTML;\r\n    }\r\n    editFields += '</table>';\r\n\r\n    editFields += '<button class=\"closeButton\" type=\"button\" onclick=\"editor.closeEdit()\">Done</button>';\r\n    this.editorHtml.innerHTML = editFields;\r\n  }\r\n\r\n  getUnitNameAndCostHTML(unit) {\r\n    var costHTML =  'Points: ' + unit.totalPoints\r\n                 +  ' | Power: ' + unit.totalPower\r\n                 +  ' | Wounds: ' + unit.totalWounds\r\n                 +  ' | Models: ' + unit.totalModels;\r\n    let HTML = '<tr>'\r\n      + '<td class=\"name\" colspan=\"5\">' + unit.name + '</td>'\r\n      + '<td class=\"cost\" colspan=\"6\">' + costHTML + '</td>'\r\n      + '</tr>';\r\n    \r\n    return HTML;\r\n  }\r\n\r\n  getModelTypeHTML(type) {\r\n    return '<tr><td class=\"modelType\" colspan=\"11\">' + type + '(s)</td></tr>';\r\n  }\r\n\r\n  getButtonRowHTML(canAdd, canRemove, model) {\r\n    var modelId = \"'\" + model + \"'\";\r\n    let HTML = '<tr><td colspan=\"11\">';\r\n    if (canAdd) {\r\n      let button = document.createElement\r\n      HTML += '<button class=\"add\" type=\"button\" onclick=\"editor.addModel(' + modelId + ')\">Add</button>';\r\n    }\r\n    if (canRemove) {\r\n      HTML += '<button class=\"remove\" type=\"button\" onclick=\"editor.removeModel(' + modelId + ')\">Remove</button>';\r\n    }\r\n    HTML += '</td></tr>';\r\n    return HTML;\r\n  } \r\n\r\n  getModelStatsHTML(unit, model) {\r\n    var html = '';\r\n    html += '<tr>'\r\n      + '<td class=\"stat\" id=\"name\">' + model.name + '</td>'\r\n      + '<td class=\"stat\" id=\"m\">' + unit.getUnProfiledStats(model.modelInfo.M) + '</td>'\r\n      + '<td class=\"stat\" id=\"ws\">' + unit.getUnProfiledStats(model.modelInfo.WS) + '</td>'\r\n      + '<td class=\"stat\" id=\"bs\">' + unit.getUnProfiledStats(model.modelInfo.BS) + '</td>'\r\n      + '<td class=\"stat\" id=\"s\">' + unit.getUnProfiledStats(model.modelInfo.S) + '</td>'\r\n      + '<td class=\"stat\" id=\"t\">' + unit.getUnProfiledStats(model.modelInfo.T) + '</td>'\r\n      + '<td class=\"stat\" id=\"w\">' + unit.getUnProfiledStats(model.modelInfo.W) + '</td>'\r\n      + '<td class=\"stat\" id=\"a\">' + unit.getUnProfiledStats(model.modelInfo.A) +'</td>'\r\n      + '<td class=\"stat\" id=\"ld\">' + unit.getUnProfiledStats(model.modelInfo.Ld) + '</td>'\r\n      + '<td class=\"stat\" id=\"sv\">' + unit.getUnProfiledStats(model.modelInfo.Sv) + '</td>'\r\n      + '<td></td>'\r\n      + '</tr>';\r\n    return html;\r\n  }\r\n\r\n  getWeaponsHTML(model, faction) {\r\n    let HTML = '';\r\n    let selectedWeapons = model.modelInfo.Wargear.weapons[model.selectedWeaponConfig];\r\n    for (let weapon of selectedWeapons) {\r\n      let weaponInfo = factionList[faction].wargear[weapon];\r\n      if (weaponInfo !== undefined) {\r\n        if (weaponInfo.WargearAbility !== undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"9\">' + weaponInfo.WargearAbility + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else if (weaponInfo.profiles === undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"range\">' + weaponInfo.Range + '</td>'\r\n          + '<td class=\"stat\" id=\"type\">' + weaponInfo.Type + '</td>'\r\n          + '<td class=\"stat\" id=\"s\">' + weaponInfo.S + '</td>'\r\n          + '<td class=\"stat\" id=\"ap\">' + weaponInfo.AP + '</td>'\r\n          + '<td class=\"stat\" id=\"d\">' + weaponInfo.D + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + weaponInfo.Abilities + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else {\r\n          let desription = weaponInfo.description === undefined ? '' : weaponInfo.description;\r\n          HTML += '<tr class=\"profiledWeapon\">'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"description\" colspan=\"9\">' + desription + '</td>'\r\n          + '</tr>';\r\n          for (var profile in weaponInfo.profiles) {\r\n            var profileInfo = weaponInfo.profiles[profile];\r\n            if (profileInfo !== undefined) {\r\n              HTML += '<tr class=\"profile\">'\r\n              + '<td class=\"stat\" id=\"name\"> - ' + profile + '</td>'\r\n              + '<td class=\"stat\" id=\"range\">' + profileInfo.Range + '</td>'\r\n              + '<td class=\"stat\" id=\"type\">' + profileInfo.Type + '</td>'\r\n              + '<td class=\"stat\" id=\"s\">' + profileInfo.S + '</td>'\r\n              + '<td class=\"stat\" id=\"ap\">' + profileInfo.AP + '</td>'\r\n              + '<td class=\"stat\" id=\"d\">' + profileInfo.D + '</td>'\r\n              + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + profileInfo.Abilities + '</td>'\r\n              + '</tr>';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  getWeaponLoadoutSelectionHTML(type, id, model) {\r\n    let valueStr = '' + type + '-' + id + '-';\r\n    let HTML = '';\r\n    HTML += '<tr><td colspan=\"11\"><select onchange=\"editor.editLoadout(value);\">';\r\n    \r\n    let loadoutLength = model.modelInfo.Wargear.weapons.length;\r\n    let selected = model.selectedWeaponConfig;\r\n    for (let i = 0; i < loadoutLength; i++) {\r\n      let weaponsList = model.modelInfo.Wargear.weapons[i];\r\n      let cost = 0;\r\n      for (let weapon = 0; weapon < weaponsList.length; weapon++) {\r\n        cost += factionList[this.unit.faction].wargear[weaponsList[weapon]].Points;\r\n      }\r\n      if (i == selected) {\r\n        HTML += '<option value=\"' + valueStr + i + '\" selected=\"selected\">' + this.formatWeaponsList(model.modelInfo.Wargear.weapons[i]) + ' (' + cost + ' pnts)</option>';\r\n      }\r\n      else {     \r\n        HTML += '<option value=\"' + valueStr + i + '\">' + this.formatWeaponsList(model.modelInfo.Wargear.weapons[i]) + ' (' + cost + ' pnts)</option>';\r\n      }\r\n    }\r\n    HTML += '</select></td></tr>';\r\n    return HTML;\r\n  }\r\n\r\n  formatWeaponsList(weapons) {\r\n    let formattedList = '';\r\n    for (let i = 0; i < weapons.length; i++) {\r\n      formattedList += weapons[i];\r\n      if (i !== weapons.length - 1) {\r\n        formattedList += ' | ';\r\n      }\r\n    }\r\n    return formattedList;\r\n  }\r\n\r\n  getAllegianceHTML(unit) {\r\n    let HTML = '';\r\n    for (var modelType in unit.models) {\r\n      if (unit.models[modelType].length > 0) {\r\n        let allegiances = unit.models[modelType][0].modelInfo.Allegiance;\r\n        if (allegiances !== undefined) {\r\n          let selected = unit.models[modelType][0].selectedAllegiance;\r\n          HTML += '<tr><td colspan=\"11\"><select onchange=editor.editAllegiance(value)>';\r\n          for (let i = 0; i < allegiances.length; i++) {\r\n            if (i == selected) {\r\n              HTML += '<option selected=\"selected\" value=\"' + i + '\">' + allegiances[i] + '</option>';\r\n            }\r\n            else {\r\n              HTML += '<option value=\"' + i + '\">' + allegiances[i] + '</option>';\r\n            }\r\n          }\r\n          HTML += '</select></td></tr>';\r\n          return HTML;\r\n        }\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  getSeperatorHTML() {\r\n    return '<tr><td class=\"seperator\" colspan=\"11\"><hr/></td></tr>';\r\n  }\r\n\r\n  addModel(id) {\r\n    this.unit.addModel(id);\r\n  }\r\n\r\n  removeModel(id) {\r\n    this.unit.removeModel(id);\r\n  }\r\n\r\n  editLoadout(argStr) {\r\n    let args = argStr.split('-');\r\n    this.unit.updateModelWargear(args[0], args[1], args[2]);\r\n  }\r\n\r\n  editAllegiance(index) {\r\n    this.unit.updateAllegiance(index);\r\n  }\r\n\r\n  closeEdit() {\r\n    this.editorContainerHtml.style.width = '0px';\r\n    this.active = false;\r\n    list.updateCosts();\r\n    list.renderList();\r\n  } */\r\n}\r\n","import Data from '../src/data/dataController';\r\nimport Costs from '../src/utils/costController';\r\nimport FactionList from '../src/lists/factionList';\r\nimport UnitList from '../src/lists/unitList';\r\nimport ArmyList from '../src/lists/armyList';\r\nimport Editor from '../src/editor/editor';\r\n\r\nexport default class ListBuilder {\r\n\r\n  public static data: Data;\r\n  public static costs: Costs;\r\n  public static factionList: FactionList;\r\n  public static unitList: UnitList;\r\n  public static armyList: ArmyList;\r\n  public static editor: Editor;\r\n\r\n  constructor() {\r\n    ListBuilder.data = new Data(this.setup, this.loadingFailure);\r\n  }\r\n\r\n  public loadFactionData() {\r\n    ListBuilder.data.loadFactionData();\r\n  }\r\n\r\n  public setup() {\r\n    ListBuilder.costs = new Costs();\r\n    ListBuilder.factionList = new FactionList();\r\n    ListBuilder.unitList = new UnitList();\r\n    ListBuilder.armyList = new ArmyList();\r\n    ListBuilder.editor = new Editor();\r\n  }\r\n\r\n  public loadingFailure() {\r\n    alert('Faction data failed to load :(');\r\n  }\r\n}\r\n\r\nlet list = new ListBuilder();\r\nlist.loadFactionData();\r\n\r\n/**\r\n * X 1. Load all the supported faction files\r\n * X 2. Create the cost header \r\n * X 3. Create the faction list\r\n * 4. Create the army list\r\n * X 5.   Create the available unit list\r\n * 6.   Populate the army list\r\n * 7.   Create the editor\r\n * \r\n * TODOs: \r\n *  - Spells\r\n *  - Strategems\r\n *  - Detachments\r\n *  - Warlord traits\r\n *  - A way to tell which weapon goes with which model in print view\r\n */\r\n","export default class ArmyList {\r\n\r\n  public addUnit(id: string, faction: string, type: string, name: string) {\r\n    // TODO - is id still needed\r\n  }\r\n\r\n  public removeUnit(idString: string) {\r\n    // TODO\r\n  }\r\n\r\n  public addSmiteSpell() {\r\n    // TODO\r\n  }\r\n\r\n  public addFactionSpells(id: string, faction: string, spells: string) {\r\n    // TODO - is id still needed\r\n  }\r\n\r\n  /* addToList(idString) {\r\n    var params = idString.split(\"-\");\r\n    var faction = params[0];\r\n    var type = params[1];\r\n    var unit = params[2];\r\n\r\n    listContents[type].push(new NewUnit(currentUnits, faction, type, unit));\r\n    currentUnits++;\r\n\r\n    this.updateCosts();\r\n    this.renderList();\r\n  }\r\n\r\n  removeFromList(id) {\r\n    for (let type in listContents) {\r\n      let tempArray = [];\r\n      for (let unit in listContents[type]) {\r\n        if (listContents[type][unit].id !== id) {\r\n          tempArray.push(listContents[type][unit]);\r\n        }\r\n      }\r\n      listContents[type] = tempArray;\r\n    }\r\n    this.updateCosts();\r\n    this.renderList();\r\n  }\r\n\r\n  editUnit(id) {\r\n    editor.editUnit(id);\r\n  }\r\n\r\n  updateCosts() {\r\n    let power = 0;\r\n    let points= 0;\r\n    let wounds = 0;\r\n    let models = 0;\r\n    for (let type in listContents) {\r\n      for (let unit of listContents[type]) {\r\n        if (unit !== null) {\r\n          power += unit.totalPower;\r\n          points += unit.totalPoints;\r\n          wounds += unit.totalWounds;\r\n          models += unit.totalModels;\r\n        }\r\n      }\r\n    } \r\n    costs = [power, points, wounds, models];\r\n    costControl.updateCosts();\r\n  }\r\n\r\n  // TODO\r\n  addSmiteSpell() {\r\n\r\n  }\r\n\r\n  // TODO\r\n  addFactionSpells(faction) {\r\n\r\n  }\r\n\r\n  // TODO - display extras\r\n  renderList() {\r\n    var newUnitHTML = '';\r\n    document.getElementById(\"newListContents\").innerHTML = \"\";\r\n\r\n    for (var type in listContents) {\r\n      if (listContents[type].length > 0) {\r\n        var imageName = ''\r\n        switch (type) {\r\n          case \"HQ\":\r\n            imageName = 'hq.png';\r\n            break;\r\n          case \"Troops\":\r\n            imageName = 'troops.png';\r\n            break;\r\n          case \"Elites\":\r\n            imageName = 'elites.png';\r\n            break;\r\n          case \"Fast Attack\":\r\n            imageName = 'fastattack.png';\r\n            break;\r\n          case \"Heavy Support\":\r\n            imageName = 'heavysupport.png';\r\n            break;\r\n          case \"Dedicated Transport\":\r\n            imageName = 'dedicatedtransport.png';\r\n            break;\r\n          case \"Flyer\":\r\n            imageName = 'flyers.png';\r\n            break;\r\n          case \"Fortification\":\r\n            imageName = 'fortifications.png';\r\n            break;\r\n          case \"Lord Of War\":\r\n            imageName = 'lordofwar.png';\r\n            break;\r\n        }\r\n\r\n        newUnitHTML += '<div id=\"typeHeader\"><img src=\"Content/40kListBuilder/resources/icons/' + imageName + '\"/><h1>' + type + '</h1></div>';\r\n        \r\n      }\r\n      for (var unit = 0; unit < listContents[type].length; unit++) {\r\n        if (listContents[type][unit] !== null) {\r\n          let unitInfo = listContents[type][unit];\r\n          newUnitHTML += '<table class=\"unitTable\" id=\"' + unitInfo.id + '\">';\r\n          newUnitHTML += unitInfo.getUnitNameAndCostHTML();\r\n          newUnitHTML += unitInfo.getStatsHeadersHTML();\r\n          newUnitHTML += unitInfo.getStatsHTML();\r\n          newUnitHTML += unitInfo.getWeaponsHeadersHTML();\r\n          newUnitHTML += unitInfo.getWeaponsHTML();\r\n          newUnitHTML += unitInfo.getAbilitiesHTML();\r\n          newUnitHTML += unitInfo.getPsykerHTML();\r\n          newUnitHTML += unitInfo.getAllegianceHTML();\r\n          newUnitHTML += unitInfo.getKeywordsHTML();\r\n\r\n          newUnitHTML += '</table>';\r\n          newUnitHTML += '<ul class=\"unitControls\">'\r\n            +'<li class=\"button\"><img onclick=\"list.removeFromList(' + unitInfo.id + ')\" src=\"Content/40kListBuilder/resources/icons/delete.png\"/></li>'\r\n            +'<li class=\"button\"><img onclick=\"list.editUnit(' + unitInfo.id + ')\" src=\"Content/40kListBuilder/resources/icons/edit.png\"/></li>'\r\n            +'</ul><div class=\"clear\"></div>';\r\n        }\r\n      }\r\n    }\r\n    document.getElementById(\"newListContents\").innerHTML += newUnitHTML;\r\n    document.getElementById(\"newListContents\").innerHTML += '<div class=\"spacer\"></div>';\r\n  } */\r\n}\r\n","import Factions from '../data/factions';\r\nimport Settings from '../settings';\r\nimport ListBuilder from '../init';\r\n\r\nexport default class FactionList {\r\n\r\n  private open: boolean;\r\n  private menuBtn: HTMLElement;\r\n  private factionList: HTMLElement;\r\n\r\n  constructor() {\r\n    this.open = false;\r\n    this.menuBtn = (document.getElementById(\"factionBtn\") as HTMLElement);\r\n    this.factionList = (document.getElementById(\"factionList\") as HTMLElement);\r\n    this.setupFactionList();\r\n  }\r\n\r\n  private openNav() {\r\n    (document.getElementById(\"sidenav\") as HTMLElement).style.width = \"350px\";\r\n    (document.getElementById(\"availableList\") as HTMLElement).style.marginLeft = \"350px\";\r\n    (document.getElementById(\"newList\") as HTMLElement).style.paddingLeft = \"700px\";\r\n    this.open = true;\r\n  }\r\n\r\n  private closeNav() {\r\n    (document.getElementById(\"sidenav\") as HTMLElement).style.width = \"60px\";\r\n    (document.getElementById(\"availableList\") as HTMLElement).style.marginLeft = \"60px\";\r\n    (document.getElementById(\"newList\") as HTMLElement).style.paddingLeft = \"410px\";\r\n    this.open = false;\r\n  }\r\n\r\n  private toggleNav() {\r\n    if (this.open) {\r\n      this.closeNav();\r\n    }\r\n    else {\r\n      this.openNav();\r\n    }\r\n  }\r\n\r\n  private isOpen() {\r\n    return this.open;\r\n  }\r\n\r\n  private setupFactionList() {\r\n    this.menuBtn.onclick = () => { this.toggleNav(); };\r\n    if (!this.isOpen()) {\r\n      this.openNav();\r\n    }\r\n    for (let faction in Factions) {\r\n      if (Settings.supportedFactions.indexOf(faction) !== -1) {\r\n        this.factionList.appendChild(this.createFactionListElement(faction, true));\r\n      }\r\n    }\r\n    for (let faction in Factions) {\r\n      if (Settings.supportedFactions.indexOf(faction) === -1) {\r\n        this.factionList.appendChild(this.createFactionListElement(faction, false));\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFactionListElement(faction: string, supported: boolean): HTMLElement {\r\n    let listItem = document.createElement('li');\r\n    listItem.id = faction;\r\n    if (!supported) {\r\n      listItem.className = \"factionNotSupported\";\r\n    }\r\n    listItem.onclick = () => { this.factionSelected(faction); };\r\n    listItem.innerHTML = '<img src=\"Content/40kListBuilder/resources/icons/' + Factions[faction].icon + '\"/>' + faction;\r\n    return listItem;\r\n  }\r\n\r\n  private factionSelected(faction: string) {\r\n    ListBuilder.unitList.factionSelected(faction);\r\n    if (this.isOpen()) {\r\n      this.closeNav();\r\n    }\r\n  }\r\n}\r\n","import AvailableUnit from \"../objects/availableUnit\";\r\nimport ListBuilder from \"../init\";\r\n\r\nexport default class UnitList {\r\n\r\n  private currentFaction: string;\r\n  private availableList: Array<AvailableUnit>;\r\n\r\n  constructor() {\r\n    this.currentFaction = '';\r\n    this.availableList = [];\r\n  }\r\n\r\n  public factionSelected(faction: string) {\r\n    this.availableList = [];\r\n    this.currentFaction = faction;\r\n    let factionData = ListBuilder.data.data[faction];\r\n    for (let type in factionData.units) {\r\n      let units = factionData.units[type];\r\n      for (let unit in units) {\r\n        this.availableList.push(new AvailableUnit(faction, type, unit));\r\n      }\r\n    }\r\n    this.renderList();\r\n  }\r\n\r\n  private renderList() {\r\n    let availableListHTML = (document.getElementById(\"availableList\") as HTMLElement);\r\n    availableListHTML.innerHTML = '<h2>' + this.currentFaction + '</h2>';\r\n\r\n    let containingList = document.createElement('ul');\r\n    let typeList = document.createElement('ul');\r\n    let currentType = \"\";\r\n    let listItem = document.createElement('li');\r\n\r\n    for (let unit of this.availableList) {\r\n      if (unit.type !== currentType) {\r\n        if (currentType !== \"\") {\r\n          containingList.appendChild(typeList);\r\n          typeList = document.createElement('ul');\r\n        }\r\n        typeList.innerHTML = unit.type + '<hr/>';\r\n        currentType = unit.type;\r\n      }    \r\n      let unitId = unit.faction + \"-\" + unit.type + \"-\" + unit.name;\r\n      listItem = document.createElement('li');\r\n      listItem.id = unitId;\r\n      listItem.onclick = () => {\r\n        ListBuilder.armyList.addUnit(unitId, unit.faction, unit.type, unit.name);\r\n      };\r\n      listItem.innerHTML = unit.name\r\n        + '<br/><div id=\"unitDetails\"><table><tr><td>Points: ' \r\n        + unit.points\r\n        + '</td><td>Power: '\r\n        + unit.power\r\n        + '</td><td>Wounds: '\r\n        + unit.wounds\r\n        + '</td><td>Models: '\r\n        + unit.models\r\n        + '</td></tr></table></div>';\r\n      typeList.appendChild(listItem);\r\n    }\r\n    containingList.appendChild(typeList);\r\n    \r\n    if (ListBuilder.data.data[this.currentFaction].spells !== undefined) {\r\n      let spellsList = document.createElement('ul');\r\n      spellsList.innerHTML = 'Spells<hr/>';\r\n\r\n      let smite = document.createElement('li');\r\n      smite.id = \"smite\";\r\n      smite.onclick = () => {\r\n        ListBuilder.armyList.addSmiteSpell();\r\n      };\r\n      smite.innerHTML = \"Smite\";\r\n      spellsList.appendChild(smite);\r\n\r\n      for (let spellType in ListBuilder.data.data[this.currentFaction].spells) {\r\n        let id = this.currentFaction + '-' + spellType;\r\n        let spellItem = document.createElement('li');\r\n        spellItem.id = id;\r\n        spellItem.onclick = () => {\r\n          ListBuilder.armyList.addFactionSpells(id, this.currentFaction, spellType);\r\n        };\r\n        spellItem.innerHTML = spellType;\r\n        spellsList.appendChild(spellItem);\r\n      }\r\n      containingList.appendChild(spellsList);\r\n    }\r\n\r\n    availableListHTML.appendChild(containingList);\r\n\r\n    let spacer = document.createElement('div');\r\n    spacer.className = \"spacer\";\r\n    availableListHTML.appendChild(spacer);\r\n  }\r\n}\r\n","import ListBuilder from \"../init\";\r\n\r\nexport default class AvailableUnit {\r\n\r\n  public faction: string;\r\n  public type: string;\r\n  public name: string;\r\n  public unitInfo: any;\r\n  public points: number;\r\n  public power: number;\r\n  public wounds: number;\r\n  public models: number;\r\n\r\n  constructor(faction: string, type: string, unit: string) {\r\n    this.faction = faction;\r\n    this.type = type;\r\n    this.name = unit;\r\n    this.unitInfo = ListBuilder.data.data[faction].units[type][unit];\r\n    this.points = this.getPointsValue();\r\n    this.power = this.getPowerValue();\r\n    this.wounds = this.getWoundsValue();\r\n    this.models = this.getModelsValue();\r\n  }\r\n\r\n  public getPointsValue() {\r\n    let points = 0;\r\n    for (let modelType of this.unitInfo.modelTypes) {\r\n      let modelPoints = 0;\r\n      let model = ListBuilder.data.data[this.faction].models[modelType.model];\r\n      modelPoints += model.Points;  \r\n      if (!model.PointsIncludesWargear) {\r\n        if(model.Wargear.weapons) {\r\n          for (let weapon = 0; weapon < model.Wargear.weapons[0].length; weapon++) {\r\n            modelPoints += ListBuilder.data.data[this.faction].wargear[model.Wargear.weapons[0][weapon]].Points;\r\n          }\r\n        }\r\n      }\r\n      points += (modelPoints * modelType.defaultAmount);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  public getPowerValue() {\r\n    let power = 0;\r\n    power += this.unitInfo.power[0][1];\r\n    return power;\r\n  }\r\n\r\n  public getWoundsValue() {\r\n    let wounds = 0;\r\n    for (let modelType of this.unitInfo.modelTypes) {\r\n      let model = ListBuilder.data.data[this.faction].models[modelType.model];\r\n      wounds += (model.W * modelType.defaultAmount); \r\n    }\r\n    return wounds;\r\n  }\r\n\r\n  public getModelsValue() {\r\n    let models = 0;\r\n    for (let modelType of this.unitInfo.modelTypes) {\r\n      models += modelType.defaultAmount;\r\n    }\r\n    return models;\r\n  }\r\n}\r\n","let Settings = {\r\n  supportedFactions: [\r\n    'Craftworlds',\r\n    'Harlequins',\r\n    'Ynnari'\r\n  ]\r\n};\r\n\r\nexport default Settings;\r\n","export default class Costs {\r\n\r\n  // cost values\r\n  public costs: Array<number>;\r\n\r\n  // elements\r\n  private pointsElement: HTMLElement;\r\n  private powerElement: HTMLElement;\r\n  private woundsElement: HTMLElement;\r\n  private modelsElement: HTMLElement;\r\n\r\n  constructor() {\r\n    this.costs = [0,0,0,0];\r\n    this.pointsElement = document.getElementById(\"POINTS\") as HTMLElement;\r\n    this.powerElement = document.getElementById(\"POWER\") as HTMLElement;\r\n    this.woundsElement = document.getElementById(\"WOUNDS\") as HTMLElement;\r\n    this.modelsElement = document.getElementById(\"MODELS\") as HTMLElement;\r\n    this.updateCosts();\r\n  }\r\n\r\n  private updateCosts() {\r\n    \r\n    this.pointsElement.innerHTML = '<div class=\"costValue\">' + this.costs[0] + '</div>' + 'POINTS';\r\n    this.powerElement.innerHTML = '<div class=\"displayedCostSmall\">Power: ' + this.costs[1] + '</div>';\r\n    this.woundsElement.innerHTML = '<div class=\"displayedCostSmall\">Wounds: ' + this.costs[2] + '</div>';\r\n    this.modelsElement.innerHTML = '<div class=\"displayedCostSmall\">Models: ' + this.costs[3] + '</div>';\r\n  }\r\n}\r\n"]}