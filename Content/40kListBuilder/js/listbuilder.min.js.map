{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/data/dataController.ts","src/data/factions.ts","src/editor/editor.ts","src/init.ts","src/lists/armyList.ts","src/lists/factionList.ts","src/lists/unitList.ts","src/objects/availableUnit.ts","src/objects/model.ts","src/objects/unit.ts","src/settings.ts","src/utils/costController.ts"],"names":["f","exports","module","define","amd","window","global","self","this","listbuilder","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","factions_1","__importDefault","settings_1","Data","success","failure","filesLoaded","data","prototype","loadFactionData","_this","faction","default","supportedFactions","indexOf","json","dataFile","request_1","XMLHttpRequest","onload","onFileLoaded","JSON","parse","response","onerror","onFileFailed","open","send","name","jsonData","Adeptus Custodes","icon","Adeptus Mechanicus","Astra Militarum","Blood Angels","Chaos Daemons","Chaos Space Marines","Craftworlds","Dark Angels","Death Guard","Deathwatch","Drukhari","Grey Knights","Harlequins","Imperial Knights","Necrons","Orks","Space Marines","T'au Empire","Thousand Sons","Tyranids","Ynnari","Editor","editUnit","id","dataController_1","costController_1","factionList_1","unitList_1","armyList_1","editor_1","ListBuilder","setup","loadingFailure","costs","factionList","unitList","armyList","editor","alert","init_1","unit_1","ArmyList","listContents","HQ","Troops","Elites","Fast Attack","Heavy Support","Dedicated Transport","Flyer","Fortification","Lord Of War","currentUnits","addUnit","type","push","updateCosts","renderList","removeUnit","tempArray","unit","addSmiteSpell","addFactionSpells","spells","power","points","wounds","models","_i","_a","totalPower","totalPoints","totalWounds","totalModels","updateCostsExt","renderListOld","listContainer","document","getElementById","innerHTML","newUnitHTML","getImageName","unitInfo","getUnitNameAndCostHTML","getStatsHeadersHTML","getStatsHTML","getWeaponsHeadersHTML","getWeaponsHTML","getAbilitiesHTML","getPsykerHTML","getAllegianceHTML","getKeywordsHTML","imageName","unitTable","createElement","className","appendChild","getUnitControls","spacer","controlList","deleteBtn","onclick","editBtn","FactionList","menuBtn","setupFactionList","openNav","style","width","marginLeft","paddingLeft","closeNav","toggleNav","isOpen","createFactionListElement","supported","listItem","factionSelected","availableUnit_1","UnitList","currentFaction","availableList","factionData","units","availableListHTML","containingList","typeList","currentType","undefined","spellsList","smite","spellType","this_1","spellItem","AvailableUnit","getPointsValue","getPowerValue","getWoundsValue","getModelsValue","modelTypes","modelType","modelPoints","model","Points","PointsIncludesWargear","Wargear","weapons","weapon","wargear","defaultAmount","W","Model","modelInfo","selectedWeaponConfig","selectedAllegiance","model_1","Unit","unitId","setupDefaultModels","costHTML","HTML","modelNumStr","getUnProfiledStats","M","WS","BS","S","T","A","Ld","Sv","stat","stats","value","Wounds","listOfWeapons","amountsPerWeapon","weaponIndex","weaponInfo","numberOf","WargearAbility","profiles","Range","Type","AP","D","Abilities","desription","description","profile","profileInfo","abilityHTML","abilityList","abilities","ability","factionAbility","htmlString","getFactionAbility","factionSpecialRules","psykerHTML","Psyker","allegianceHTML","Allegiance","keywords","keyword","toUpperCase","Keywords","keywordHTML","keywords_1","calculateModels","calculateWounds","calculatePoints","calculatePower","modelIndex","selectedWeapons","num","newModel","Costs","pointsElement","powerElement","woundsElement","modelsElement"],"mappings":"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","file":"listbuilder.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","import Factions from '../data/factions';\r\nimport Settings from '../settings';\r\n\r\ninterface DataCollection {\r\n  [key: string]: any;\r\n}\r\n\r\nexport default class Data {\r\n\r\n  public data: DataCollection;\r\n  private filesLoaded: number;\r\n  private success: Function;\r\n  private failure: Function;\r\n\r\n  constructor(success: Function, failure: Function) {\r\n    this.filesLoaded = 0;\r\n    this.success = success;\r\n    this.failure = failure;\r\n    this.data = {};\r\n  }\r\n\r\n  public loadFactionData() {\r\n    for (let faction in Factions) {\r\n      if (Settings.supportedFactions.indexOf(faction) > -1) {\r\n        let json = Factions[faction].dataFile;\r\n        let request = new XMLHttpRequest();\r\n        request.onload = () => {\r\n          this.onFileLoaded(faction, JSON.parse(request.response));\r\n        };\r\n        request.onerror = () => {\r\n          this.onFileFailed();\r\n        };\r\n        request.open('get', '/Content/40kListBuilder/resources/data/' + json);\r\n        request.send();\r\n      }\r\n    }\r\n  }\r\n\r\n  private onFileLoaded(name: string, jsonData: Object) {\r\n    this.filesLoaded++;\r\n    this.data[name] = jsonData;\r\n    if (this.filesLoaded === Settings.supportedFactions.length) {\r\n      this.success();\r\n    }\r\n  }\r\n\r\n  private onFileFailed() {\r\n    this.failure();\r\n  }\r\n}\r\n","// TODO: should just be a list of names, icons, and file locations\r\n\r\nlet factions = {\r\n  \"Adeptus Custodes\": {\r\n    \"dataFile\": \"AdeptusCustodes.json\",\r\n    \"icon\": \"talonsoftheemperor.png\"\r\n  },\r\n  \"Adeptus Mechanicus\": {\r\n    \"dataFile\": \"AdeptusMechanicus.json\",\r\n    \"icon\": \"adeptusmechanicus.png\"\r\n  },\r\n  \"Astra Militarum\": {\r\n    \"dataFile\": \"AstraMilitarum.json\",\r\n    \"icon\": \"astramilitarum.png\"\r\n  },\r\n  \"Blood Angels\": {\r\n    \"dataFile\": \"BloodAngles.json\",\r\n    \"icon\": \"bloodangels.png\"\r\n  },\r\n  \"Chaos Daemons\": {\r\n    \"dataFile\": \"Chaosaemons.json\",\r\n    \"icon\": \"chaosdaemons.png\"\r\n  },\r\n  \"Chaos Space Marines\": {\r\n    \"dataFile\": \"ChaosSpaceMarines.json\",\r\n    \"icon\": \"chaosdaemons.png\"\r\n  },\r\n  \"Craftworlds\": {\r\n    \"dataFile\": \"Craftworlds.json\",\r\n    \"icon\": \"craftworld.png\"\r\n  },\r\n  \"Dark Angels\": {\r\n    \"dataFile\": \"DarkAngles.json\",\r\n    \"icon\": \"darkangels.png\"\r\n  },\r\n  \"Death Guard\": {\r\n    \"dataFile\": \"DeathGuard.json\",\r\n    \"icon\": \"deathwatch.png\"\r\n  },\r\n  \"Deathwatch\": {\r\n    \"dataFile\": \"Deathwatch.json\",\r\n    \"icon\": \"hereticastartes.png\"\r\n  },\r\n  \"Drukhari\": {\r\n    \"dataFile\": \"Drukhari.json\",\r\n    \"icon\": \"drukhari.png\"\r\n  },\r\n  \"Grey Knights\": {\r\n    \"dataFile\": \"GreyKnights.json\",\r\n    \"icon\": \"greyknights.png\"\r\n  },\r\n  \"Harlequins\": {\r\n    \"dataFile\": \"Harlequins.json\",\r\n    \"icon\": \"harlequins.png\"\r\n  },\r\n  \"Imperial Knights\": {\r\n    \"dataFile\": \"ImperialKnights.json\",\r\n    \"icon\": \"imperialknights.png\"\r\n  },\r\n  \"Necrons\": {\r\n    \"dataFile\": \"Necrons.json\",\r\n    \"icon\": \"necrons.png\"\r\n  },\r\n  \"Orks\": {\r\n    \"dataFile\": \"Orks.json\",\r\n    \"icon\": \"orks.png\"\r\n  },\r\n  \"Space Marines\": {\r\n    \"dataFile\": \"SpaceMarines.json\",\r\n    \"icon\": \"spacemarines.png\"\r\n  },\r\n  \"T'au Empire\": {\r\n    \"dataFile\": \"TauEmpire.json\",\r\n    \"icon\": \"tau.png\"\r\n  },\r\n  \"Thousand Sons\": {\r\n    \"dataFile\": \"ThousandSons.json\",\r\n    \"icon\": \"hereticastartes.png\"\r\n  },\r\n  \"Tyranids\": {\r\n    \"dataFile\": \"Tyranids.json\",\r\n    \"icon\": \"tyranids.png\"\r\n  },\r\n  \"Ynnari\": {\r\n    \"dataFile\": \"Ynnari.json\",\r\n    \"icon\": \"ynnari.png\"\r\n  }\r\n};\r\n\r\nexport default factions;\r\n","export default class Editor {\r\n\r\n  public editUnit(id: number) {\r\n    // TODO\r\n  }\r\n\r\n  // TODO - a lot of this can now be done via the unit class\r\n\r\n  /* constructor() {\r\n    this.editorContainerHtml = document.getElementById(\"editor\");\r\n    this.editorHtml = document.getElementById(\"editorForm\");\r\n    this.editorContainerHtml.style.width = '0px';\r\n    this.active = false;\r\n  }\r\n\r\n  editUnit(id) {\r\n    for (var type in listContents) {\r\n      for (var unit in listContents[type]) {\r\n        if (listContents[type][unit].id === id) {\r\n          this.unit = listContents[type][unit];\r\n          this.renderEdit();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderEdit() {\r\n    this.active = true;\r\n    this.editorContainerHtml.style.width = '100%';\r\n    var editFields = this.editorHtml.innerHTML;\r\n    editFields = '';\r\n\r\n    editFields += '<table class=\"editTable\">';\r\n    editFields += this.getUnitNameAndCostHTML(this.unit);\r\n\r\n    let globalMax = this.unit.unitInfo.modelTypes[0].maxAmount;\r\n    let globalMin = this.unit.unitInfo.modelTypes[0].defaultAmount;\r\n    let totalModels = 0;\r\n    for (var i = 0; i < this.unit.unitInfo.modelTypes.length; i++) {\r\n      totalModels += this.unit.models[this.unit.unitInfo.modelTypes[i].model].length;\r\n    }\r\n\r\n    for (var i = 0; i < this.unit.unitInfo.modelTypes.length; i++) {\r\n      editFields += this.getModelTypeHTML(this.unit.unitInfo.modelTypes[i].model);\r\n      var models = this.unit.models[this.unit.unitInfo.modelTypes[i].model];\r\n      var max = this.unit.unitInfo.modelTypes[i].maxAmount;\r\n      if (models) {\r\n        for (var model in models) {\r\n          editFields += this.unit.getStatsHeadersHTML();\r\n          editFields += this.getModelStatsHTML(this.unit, models[model]);\r\n          editFields += this.unit.getWeaponsHeadersHTML();\r\n          editFields += this.getWeaponsHTML(models[model], this.unit.faction);\r\n          editFields += this.getWeaponLoadoutSelectionHTML(i, model, models[model]);\r\n          editFields += this.getSeperatorHTML();\r\n        }\r\n        let canAdd = (totalModels < globalMax && models.length < max);\r\n        let canRemove = (totalModels > globalMin && models.length > 0);\r\n        editFields += this.getButtonRowHTML(canAdd, canRemove, i);\r\n        editFields += this.getSeperatorHTML();\r\n      }\r\n    }\r\n\r\n    let allegianceHTML = this.getAllegianceHTML(this.unit);\r\n    if (allegianceHTML !== '') {\r\n      editFields += '<tr><td class=\"modelType\" colspan=\"11\">Allegiance</td></tr>'\r\n      editFields += allegianceHTML;\r\n    }\r\n    editFields += '</table>';\r\n\r\n    editFields += '<button class=\"closeButton\" type=\"button\" onclick=\"editor.closeEdit()\">Done</button>';\r\n    this.editorHtml.innerHTML = editFields;\r\n  }\r\n\r\n  getUnitNameAndCostHTML(unit) {\r\n    var costHTML =  'Points: ' + unit.totalPoints\r\n                 +  ' | Power: ' + unit.totalPower\r\n                 +  ' | Wounds: ' + unit.totalWounds\r\n                 +  ' | Models: ' + unit.totalModels;\r\n    let HTML = '<tr>'\r\n      + '<td class=\"name\" colspan=\"5\">' + unit.name + '</td>'\r\n      + '<td class=\"cost\" colspan=\"6\">' + costHTML + '</td>'\r\n      + '</tr>';\r\n    \r\n    return HTML;\r\n  }\r\n\r\n  getModelTypeHTML(type) {\r\n    return '<tr><td class=\"modelType\" colspan=\"11\">' + type + '(s)</td></tr>';\r\n  }\r\n\r\n  getButtonRowHTML(canAdd, canRemove, model) {\r\n    var modelId = \"'\" + model + \"'\";\r\n    let HTML = '<tr><td colspan=\"11\">';\r\n    if (canAdd) {\r\n      let button = document.createElement\r\n      HTML += '<button class=\"add\" type=\"button\" onclick=\"editor.addModel(' + modelId + ')\">Add</button>';\r\n    }\r\n    if (canRemove) {\r\n      HTML += '<button class=\"remove\" type=\"button\" onclick=\"editor.removeModel(' + modelId + ')\">Remove</button>';\r\n    }\r\n    HTML += '</td></tr>';\r\n    return HTML;\r\n  } \r\n\r\n  getModelStatsHTML(unit, model) {\r\n    var html = '';\r\n    html += '<tr>'\r\n      + '<td class=\"stat\" id=\"name\">' + model.name + '</td>'\r\n      + '<td class=\"stat\" id=\"m\">' + unit.getUnProfiledStats(model.modelInfo.M) + '</td>'\r\n      + '<td class=\"stat\" id=\"ws\">' + unit.getUnProfiledStats(model.modelInfo.WS) + '</td>'\r\n      + '<td class=\"stat\" id=\"bs\">' + unit.getUnProfiledStats(model.modelInfo.BS) + '</td>'\r\n      + '<td class=\"stat\" id=\"s\">' + unit.getUnProfiledStats(model.modelInfo.S) + '</td>'\r\n      + '<td class=\"stat\" id=\"t\">' + unit.getUnProfiledStats(model.modelInfo.T) + '</td>'\r\n      + '<td class=\"stat\" id=\"w\">' + unit.getUnProfiledStats(model.modelInfo.W) + '</td>'\r\n      + '<td class=\"stat\" id=\"a\">' + unit.getUnProfiledStats(model.modelInfo.A) +'</td>'\r\n      + '<td class=\"stat\" id=\"ld\">' + unit.getUnProfiledStats(model.modelInfo.Ld) + '</td>'\r\n      + '<td class=\"stat\" id=\"sv\">' + unit.getUnProfiledStats(model.modelInfo.Sv) + '</td>'\r\n      + '<td></td>'\r\n      + '</tr>';\r\n    return html;\r\n  }\r\n\r\n  getWeaponsHTML(model, faction) {\r\n    let HTML = '';\r\n    let selectedWeapons = model.modelInfo.Wargear.weapons[model.selectedWeaponConfig];\r\n    for (let weapon of selectedWeapons) {\r\n      let weaponInfo = factionList[faction].wargear[weapon];\r\n      if (weaponInfo !== undefined) {\r\n        if (weaponInfo.WargearAbility !== undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"9\">' + weaponInfo.WargearAbility + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else if (weaponInfo.profiles === undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"range\">' + weaponInfo.Range + '</td>'\r\n          + '<td class=\"stat\" id=\"type\">' + weaponInfo.Type + '</td>'\r\n          + '<td class=\"stat\" id=\"s\">' + weaponInfo.S + '</td>'\r\n          + '<td class=\"stat\" id=\"ap\">' + weaponInfo.AP + '</td>'\r\n          + '<td class=\"stat\" id=\"d\">' + weaponInfo.D + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + weaponInfo.Abilities + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else {\r\n          let desription = weaponInfo.description === undefined ? '' : weaponInfo.description;\r\n          HTML += '<tr class=\"profiledWeapon\">'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"description\" colspan=\"9\">' + desription + '</td>'\r\n          + '</tr>';\r\n          for (var profile in weaponInfo.profiles) {\r\n            var profileInfo = weaponInfo.profiles[profile];\r\n            if (profileInfo !== undefined) {\r\n              HTML += '<tr class=\"profile\">'\r\n              + '<td class=\"stat\" id=\"name\"> - ' + profile + '</td>'\r\n              + '<td class=\"stat\" id=\"range\">' + profileInfo.Range + '</td>'\r\n              + '<td class=\"stat\" id=\"type\">' + profileInfo.Type + '</td>'\r\n              + '<td class=\"stat\" id=\"s\">' + profileInfo.S + '</td>'\r\n              + '<td class=\"stat\" id=\"ap\">' + profileInfo.AP + '</td>'\r\n              + '<td class=\"stat\" id=\"d\">' + profileInfo.D + '</td>'\r\n              + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + profileInfo.Abilities + '</td>'\r\n              + '</tr>';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  getWeaponLoadoutSelectionHTML(type, id, model) {\r\n    let valueStr = '' + type + '-' + id + '-';\r\n    let HTML = '';\r\n    HTML += '<tr><td colspan=\"11\"><select onchange=\"editor.editLoadout(value);\">';\r\n    \r\n    let loadoutLength = model.modelInfo.Wargear.weapons.length;\r\n    let selected = model.selectedWeaponConfig;\r\n    for (let i = 0; i < loadoutLength; i++) {\r\n      let weaponsList = model.modelInfo.Wargear.weapons[i];\r\n      let cost = 0;\r\n      for (let weapon = 0; weapon < weaponsList.length; weapon++) {\r\n        cost += factionList[this.unit.faction].wargear[weaponsList[weapon]].Points;\r\n      }\r\n      if (i == selected) {\r\n        HTML += '<option value=\"' + valueStr + i + '\" selected=\"selected\">' + this.formatWeaponsList(model.modelInfo.Wargear.weapons[i]) + ' (' + cost + ' pnts)</option>';\r\n      }\r\n      else {     \r\n        HTML += '<option value=\"' + valueStr + i + '\">' + this.formatWeaponsList(model.modelInfo.Wargear.weapons[i]) + ' (' + cost + ' pnts)</option>';\r\n      }\r\n    }\r\n    HTML += '</select></td></tr>';\r\n    return HTML;\r\n  }\r\n\r\n  formatWeaponsList(weapons) {\r\n    let formattedList = '';\r\n    for (let i = 0; i < weapons.length; i++) {\r\n      formattedList += weapons[i];\r\n      if (i !== weapons.length - 1) {\r\n        formattedList += ' | ';\r\n      }\r\n    }\r\n    return formattedList;\r\n  }\r\n\r\n  getAllegianceHTML(unit) {\r\n    let HTML = '';\r\n    for (var modelType in unit.models) {\r\n      if (unit.models[modelType].length > 0) {\r\n        let allegiances = unit.models[modelType][0].modelInfo.Allegiance;\r\n        if (allegiances !== undefined) {\r\n          let selected = unit.models[modelType][0].selectedAllegiance;\r\n          HTML += '<tr><td colspan=\"11\"><select onchange=editor.editAllegiance(value)>';\r\n          for (let i = 0; i < allegiances.length; i++) {\r\n            if (i == selected) {\r\n              HTML += '<option selected=\"selected\" value=\"' + i + '\">' + allegiances[i] + '</option>';\r\n            }\r\n            else {\r\n              HTML += '<option value=\"' + i + '\">' + allegiances[i] + '</option>';\r\n            }\r\n          }\r\n          HTML += '</select></td></tr>';\r\n          return HTML;\r\n        }\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  getSeperatorHTML() {\r\n    return '<tr><td class=\"seperator\" colspan=\"11\"><hr/></td></tr>';\r\n  }\r\n\r\n  addModel(id) {\r\n    this.unit.addModel(id);\r\n  }\r\n\r\n  removeModel(id) {\r\n    this.unit.removeModel(id);\r\n  }\r\n\r\n  editLoadout(argStr) {\r\n    let args = argStr.split('-');\r\n    this.unit.updateModelWargear(args[0], args[1], args[2]);\r\n  }\r\n\r\n  editAllegiance(index) {\r\n    this.unit.updateAllegiance(index);\r\n  }\r\n\r\n  closeEdit() {\r\n    this.editorContainerHtml.style.width = '0px';\r\n    this.active = false;\r\n    list.updateCosts();\r\n    list.renderList();\r\n  } */\r\n}\r\n","import Data from '../src/data/dataController';\r\nimport Costs from '../src/utils/costController';\r\nimport FactionList from '../src/lists/factionList';\r\nimport UnitList from '../src/lists/unitList';\r\nimport ArmyList from '../src/lists/armyList';\r\nimport Editor from '../src/editor/editor';\r\n\r\nexport default class ListBuilder {\r\n\r\n  public static data: Data;\r\n  public static costs: Costs;\r\n  public static factionList: FactionList;\r\n  public static unitList: UnitList;\r\n  public static armyList: ArmyList;\r\n  public static editor: Editor;\r\n\r\n  constructor() {\r\n    ListBuilder.data = new Data(this.setup, this.loadingFailure);\r\n  }\r\n\r\n  public loadFactionData() {\r\n    ListBuilder.data.loadFactionData();\r\n  }\r\n\r\n  public setup() {\r\n    ListBuilder.costs = new Costs();\r\n    ListBuilder.factionList = new FactionList();\r\n    ListBuilder.unitList = new UnitList();\r\n    ListBuilder.armyList = new ArmyList();\r\n    ListBuilder.editor = new Editor();\r\n  }\r\n\r\n  public loadingFailure() {\r\n    alert('Faction data failed to load :(');\r\n  }\r\n}\r\n\r\nlet list = new ListBuilder();\r\nlist.loadFactionData();\r\n\r\n/**\r\n * X 1. Load all the supported faction files\r\n * X 2. Create the cost header \r\n * X 3. Create the faction list\r\n * 4. Create the army list\r\n * X 5.   Create the available unit list\r\n * 6.   Populate the army list\r\n * 7.   Create the editor\r\n * \r\n * TODOs: \r\n *  - Spells\r\n *  - Strategems\r\n *  - Detachments\r\n *  - Warlord traits\r\n *  - A way to tell which weapon goes with which model in print view\r\n */\r\n","import ListBuilder from '../init';\r\nimport Unit from '../objects/unit';\r\n\r\nexport default class ArmyList {\r\n\r\n  public listContents: any;\r\n  private currentUnits: number;\r\n\r\n  constructor() {\r\n    this.listContents = {\r\n      \"HQ\": [],\r\n      \"Troops\": [],\r\n      \"Elites\": [],\r\n      \"Fast Attack\": [],\r\n      \"Heavy Support\": [],\r\n      \"Dedicated Transport\": [],\r\n      \"Flyer\": [],\r\n      \"Fortification\": [],\r\n      \"Lord Of War\": []\r\n    };\r\n    this.currentUnits = 0;\r\n  }\r\n\r\n  public addUnit(faction: string, type: string, name: string) {\r\n    this.listContents[type].push(new Unit(this.currentUnits, faction, type, name));\r\n    this.currentUnits++;\r\n    this.updateCosts();\r\n    this.renderList();\r\n  }\r\n\r\n  public removeUnit(id: number) {\r\n    for (let type in this.listContents) {\r\n      let tempArray: Array<any> = [];\r\n      for (let unit in this.listContents[type]) {\r\n        if (this.listContents[type][unit].id !== id) {\r\n          tempArray.push(this.listContents[type][unit]);\r\n        }\r\n      }\r\n      this.listContents[type] = tempArray;\r\n    }\r\n    this.updateCosts();\r\n    this.renderList();\r\n  }\r\n\r\n  public addSmiteSpell() {\r\n    // TODO\r\n  }\r\n\r\n  public addFactionSpells(id: string, faction: string, spells: string) {\r\n    // TODO - is id still needed\r\n  }\r\n\r\n  public updateCosts() {\r\n    let power = 0;\r\n    let points= 0;\r\n    let wounds = 0;\r\n    let models = 0;\r\n    for (let type in this.listContents) {\r\n      for (let unit of this.listContents[type]) {\r\n        if (unit !== null) {\r\n          power += unit.totalPower;\r\n          points += unit.totalPoints;\r\n          wounds += unit.totalWounds;\r\n          models += unit.totalModels;\r\n        }\r\n      }\r\n    } \r\n    ListBuilder.costs.updateCostsExt([points, power, wounds, models]);\r\n  }\r\n\r\n  public renderListOld() {\r\n    let listContainer = (document.getElementById(\"newListContents\") as HTMLElement);\r\n    listContainer.innerHTML = '';\r\n    let newUnitHTML = '';\r\n    for (let type in this.listContents) {\r\n      if (this.listContents[type].length > 0) {\r\n        let imageName = this.getImageName(type);\r\n        newUnitHTML += '<div id=\"typeHeader\"><img src=\"Content/40kListBuilder/resources/icons/' + imageName + '\"/><h1>' + type + '</h1></div>';\r\n      }\r\n      for (let unit = 0; unit < this.listContents[type].length; unit++) {\r\n        if (this.listContents[type][unit] !== null) {\r\n          let unitInfo = this.listContents[type][unit];\r\n          newUnitHTML += '<table class=\"unitTable\" id=\"' + unitInfo.id + '\">';\r\n          newUnitHTML += unitInfo.getUnitNameAndCostHTML();\r\n          newUnitHTML += unitInfo.getStatsHeadersHTML();\r\n          newUnitHTML += unitInfo.getStatsHTML();\r\n          newUnitHTML += unitInfo.getWeaponsHeadersHTML();\r\n          newUnitHTML += unitInfo.getWeaponsHTML();\r\n          newUnitHTML += unitInfo.getAbilitiesHTML();\r\n          newUnitHTML += unitInfo.getPsykerHTML();\r\n          newUnitHTML += unitInfo.getAllegianceHTML();\r\n          newUnitHTML += unitInfo.getKeywordsHTML();\r\n          newUnitHTML += '</table>';\r\n          newUnitHTML += '<ul class=\"unitControls\">'\r\n            +'<li class=\"button\"><img onclick=\"list.removeFromList(' + unitInfo.id + ')\" src=\"Content/40kListBuilder/resources/icons/delete.png\"/></li>'\r\n            +'<li class=\"button\"><img onclick=\"list.editUnit(' + unitInfo.id + ')\" src=\"Content/40kListBuilder/resources/icons/edit.png\"/></li>'\r\n            +'</ul><div class=\"clear\"></div>';\r\n        }\r\n      }\r\n    }\r\n    listContainer.innerHTML += newUnitHTML;\r\n    listContainer.innerHTML += '<div class=\"spacer\"></div>';\r\n  }\r\n\r\n  public renderList() {\r\n    let listContainer = (document.getElementById(\"newListContents\") as HTMLElement);\r\n    listContainer.innerHTML = '';\r\n    for (let type in this.listContents) {\r\n      if (this.listContents[type].length > 0) {\r\n        let imageName = this.getImageName(type);\r\n        listContainer.innerHTML += '<div id=\"typeHeader\"><img src=\"/Content/40kListBuilder/resources/icons/' + imageName + '\"/><h1>' + type + '</h1></div>';\r\n      }\r\n      for (let unit = 0; unit < this.listContents[type].length; unit++) {\r\n        if (this.listContents[type][unit] !== null) {\r\n          let unitInfo = this.listContents[type][unit] as Unit;\r\n          let unitTable = document.createElement('table');\r\n          unitTable.className = \"unitTable\";\r\n          unitTable.id = '' + unitInfo.id;\r\n          unitTable.innerHTML += unitInfo.getUnitNameAndCostHTML();\r\n          unitTable.innerHTML += unitInfo.getStatsHeadersHTML();\r\n          unitTable.innerHTML += unitInfo.getStatsHTML();\r\n          unitTable.innerHTML += unitInfo.getWeaponsHeadersHTML();\r\n          unitTable.innerHTML += unitInfo.getWeaponsHTML();\r\n          unitTable.innerHTML += unitInfo.getAbilitiesHTML();\r\n          unitTable.innerHTML += unitInfo.getPsykerHTML();\r\n          unitTable.innerHTML += unitInfo.getAllegianceHTML();\r\n          unitTable.innerHTML += unitInfo.getKeywordsHTML();\r\n          listContainer.appendChild(unitTable);\r\n          // TODO - these controls don't work ?? dafuq ??\r\n          listContainer.appendChild(this.getUnitControls(unitInfo.id));\r\n          listContainer.innerHTML += '<div class=\"clear\"</div>';\r\n        }\r\n      }\r\n    }\r\n    let spacer = document.createElement('div');\r\n    spacer.className = \"spacer\";\r\n    listContainer.appendChild(spacer);\r\n  }\r\n\r\n  public getImageName(type: string): string {\r\n    let imageName = '';\r\n    switch (type) {\r\n      case \"HQ\":\r\n        imageName = 'hq.png';\r\n        break;\r\n      case \"Troops\":\r\n        imageName = 'troops.png';\r\n        break;\r\n      case \"Elites\":\r\n        imageName = 'elites.png';\r\n        break;\r\n      case \"Fast Attack\":\r\n        imageName = 'fastattack.png';\r\n        break;\r\n      case \"Heavy Support\":\r\n        imageName = 'heavysupport.png';\r\n        break;\r\n      case \"Dedicated Transport\":\r\n        imageName = 'dedicatedtransport.png';\r\n        break;\r\n      case \"Flyer\":\r\n        imageName = 'flyers.png';\r\n        break;\r\n      case \"Fortification\":\r\n        imageName = 'fortifications.png';\r\n        break;\r\n      case \"Lord Of War\":\r\n        imageName = 'lordofwar.png';\r\n        break;\r\n    }\r\n    return imageName;\r\n  }\r\n\r\n  private getUnitControls(id: number): HTMLElement {\r\n    let controlList = document.createElement('ul');\r\n    controlList.className = \"unitControls\";\r\n\r\n    let deleteBtn = document.createElement('li');\r\n    deleteBtn.className = \"button\";\r\n    deleteBtn.id = 'delete' + id;\r\n    deleteBtn.innerHTML = '<img src=\"/Content/40kListBuilder/resources/icons/delete.png\"/>';\r\n    deleteBtn.onclick = function() { alert(); };\r\n    controlList.appendChild(deleteBtn);\r\n\r\n    let editBtn = document.createElement('li');\r\n    editBtn.className = \"button\";\r\n    editBtn.id = 'edit' + id;\r\n    editBtn.innerHTML = '<img src=\"/Content/40kListBuilder/resources/icons/edit.png\"/>';\r\n    editBtn.onclick = function() { alert(); };\r\n    controlList.appendChild(editBtn);\r\n\r\n    return controlList;\r\n  }\r\n\r\n}\r\n","import Factions from '../data/factions';\r\nimport Settings from '../settings';\r\nimport ListBuilder from '../init';\r\n\r\nexport default class FactionList {\r\n\r\n  private open: boolean;\r\n  private menuBtn: HTMLElement;\r\n  private factionList: HTMLElement;\r\n\r\n  constructor() {\r\n    this.open = false;\r\n    this.menuBtn = (document.getElementById(\"factionBtn\") as HTMLElement);\r\n    this.factionList = (document.getElementById(\"factionList\") as HTMLElement);\r\n    this.setupFactionList();\r\n  }\r\n\r\n  private openNav() {\r\n    (document.getElementById(\"sidenav\") as HTMLElement).style.width = \"350px\";\r\n    (document.getElementById(\"availableList\") as HTMLElement).style.marginLeft = \"350px\";\r\n    (document.getElementById(\"newList\") as HTMLElement).style.paddingLeft = \"700px\";\r\n    this.open = true;\r\n  }\r\n\r\n  private closeNav() {\r\n    (document.getElementById(\"sidenav\") as HTMLElement).style.width = \"60px\";\r\n    (document.getElementById(\"availableList\") as HTMLElement).style.marginLeft = \"60px\";\r\n    (document.getElementById(\"newList\") as HTMLElement).style.paddingLeft = \"410px\";\r\n    this.open = false;\r\n  }\r\n\r\n  private toggleNav() {\r\n    if (this.open) {\r\n      this.closeNav();\r\n    }\r\n    else {\r\n      this.openNav();\r\n    }\r\n  }\r\n\r\n  private isOpen() {\r\n    return this.open;\r\n  }\r\n\r\n  private setupFactionList() {\r\n    this.menuBtn.onclick = () => { this.toggleNav(); };\r\n    if (!this.isOpen()) {\r\n      this.openNav();\r\n    }\r\n    for (let faction in Factions) {\r\n      if (Settings.supportedFactions.indexOf(faction) !== -1) {\r\n        this.factionList.appendChild(this.createFactionListElement(faction, true));\r\n      }\r\n    }\r\n    for (let faction in Factions) {\r\n      if (Settings.supportedFactions.indexOf(faction) === -1) {\r\n        this.factionList.appendChild(this.createFactionListElement(faction, false));\r\n      }\r\n    }\r\n  }\r\n\r\n  private createFactionListElement(faction: string, supported: boolean): HTMLElement {\r\n    let listItem = document.createElement('li');\r\n    listItem.id = faction;\r\n    if (!supported) {\r\n      listItem.className = \"factionNotSupported\";\r\n    }\r\n    listItem.onclick = () => { this.factionSelected(faction); };\r\n    listItem.innerHTML = '<img src=\"Content/40kListBuilder/resources/icons/' + Factions[faction].icon + '\"/>' + faction;\r\n    return listItem;\r\n  }\r\n\r\n  private factionSelected(faction: string) {\r\n    ListBuilder.unitList.factionSelected(faction);\r\n    if (this.isOpen()) {\r\n      this.closeNav();\r\n    }\r\n  }\r\n}\r\n","import AvailableUnit from \"../objects/availableUnit\";\r\nimport ListBuilder from \"../init\";\r\n\r\nexport default class UnitList {\r\n\r\n  private currentFaction: string;\r\n  private availableList: Array<AvailableUnit>;\r\n\r\n  constructor() {\r\n    this.currentFaction = '';\r\n    this.availableList = [];\r\n  }\r\n\r\n  public factionSelected(faction: string) {\r\n    this.availableList = [];\r\n    this.currentFaction = faction;\r\n    let factionData = ListBuilder.data.data[faction];\r\n    for (let type in factionData.units) {\r\n      let units = factionData.units[type];\r\n      for (let unit in units) {\r\n        this.availableList.push(new AvailableUnit(faction, type, unit));\r\n      }\r\n    }\r\n    this.renderList();\r\n  }\r\n\r\n  private renderList() {\r\n    let availableListHTML = (document.getElementById(\"availableList\") as HTMLElement);\r\n    availableListHTML.innerHTML = '<h2>' + this.currentFaction + '</h2>';\r\n\r\n    let containingList = document.createElement('ul');\r\n    let typeList = document.createElement('ul');\r\n    let currentType = \"\";\r\n    let listItem = document.createElement('li');\r\n\r\n    for (let unit of this.availableList) {\r\n      if (unit.type !== currentType) {\r\n        if (currentType !== \"\") {\r\n          containingList.appendChild(typeList);\r\n          typeList = document.createElement('ul');\r\n        }\r\n        typeList.innerHTML = unit.type + '<hr/>';\r\n        currentType = unit.type;\r\n      }    \r\n      listItem = document.createElement('li');\r\n      listItem.onclick = () => {\r\n        ListBuilder.armyList.addUnit(unit.faction, unit.type, unit.name);\r\n      };\r\n      listItem.innerHTML = unit.name\r\n        + '<br/><div id=\"unitDetails\"><table><tr><td>Points: ' \r\n        + unit.points\r\n        + '</td><td>Power: '\r\n        + unit.power\r\n        + '</td><td>Wounds: '\r\n        + unit.wounds\r\n        + '</td><td>Models: '\r\n        + unit.models\r\n        + '</td></tr></table></div>';\r\n      typeList.appendChild(listItem);\r\n    }\r\n    containingList.appendChild(typeList);\r\n    \r\n    if (ListBuilder.data.data[this.currentFaction].spells !== undefined) {\r\n      let spellsList = document.createElement('ul');\r\n      spellsList.innerHTML = 'Spells<hr/>';\r\n\r\n      let smite = document.createElement('li');\r\n      smite.id = \"smite\";\r\n      smite.onclick = () => {\r\n        ListBuilder.armyList.addSmiteSpell();\r\n      };\r\n      smite.innerHTML = \"Smite\";\r\n      spellsList.appendChild(smite);\r\n\r\n      for (let spellType in ListBuilder.data.data[this.currentFaction].spells) {\r\n        let id = this.currentFaction + '-' + spellType;\r\n        let spellItem = document.createElement('li');\r\n        spellItem.id = id;\r\n        spellItem.onclick = () => {\r\n          ListBuilder.armyList.addFactionSpells(id, this.currentFaction, spellType);\r\n        };\r\n        spellItem.innerHTML = spellType;\r\n        spellsList.appendChild(spellItem);\r\n      }\r\n      containingList.appendChild(spellsList);\r\n    }\r\n\r\n    availableListHTML.appendChild(containingList);\r\n\r\n    let spacer = document.createElement('div');\r\n    spacer.className = \"spacer\";\r\n    availableListHTML.appendChild(spacer);\r\n  }\r\n}\r\n","import ListBuilder from \"../init\";\r\n\r\nexport default class AvailableUnit {\r\n\r\n  public faction: string;\r\n  public type: string;\r\n  public name: string;\r\n  public unitInfo: any;\r\n  public points: number;\r\n  public power: number;\r\n  public wounds: number;\r\n  public models: number;\r\n\r\n  constructor(faction: string, type: string, unit: string) {\r\n    this.faction = faction;\r\n    this.type = type;\r\n    this.name = unit;\r\n    this.unitInfo = ListBuilder.data.data[faction].units[type][unit];\r\n    this.points = this.getPointsValue();\r\n    this.power = this.getPowerValue();\r\n    this.wounds = this.getWoundsValue();\r\n    this.models = this.getModelsValue();\r\n  }\r\n\r\n  public getPointsValue() {\r\n    let points = 0;\r\n    for (let modelType of this.unitInfo.modelTypes) {\r\n      let modelPoints = 0;\r\n      let model = ListBuilder.data.data[this.faction].models[modelType.model];\r\n      modelPoints += model.Points;  \r\n      if (!model.PointsIncludesWargear) {\r\n        if(model.Wargear.weapons) {\r\n          for (let weapon = 0; weapon < model.Wargear.weapons[0].length; weapon++) {\r\n            modelPoints += ListBuilder.data.data[this.faction].wargear[model.Wargear.weapons[0][weapon]].Points;\r\n          }\r\n        }\r\n      }\r\n      points += (modelPoints * modelType.defaultAmount);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  public getPowerValue() {\r\n    let power = 0;\r\n    power += this.unitInfo.power[0][1];\r\n    return power;\r\n  }\r\n\r\n  public getWoundsValue() {\r\n    let wounds = 0;\r\n    for (let modelType of this.unitInfo.modelTypes) {\r\n      let model = ListBuilder.data.data[this.faction].models[modelType.model];\r\n      wounds += (model.W * modelType.defaultAmount); \r\n    }\r\n    return wounds;\r\n  }\r\n\r\n  public getModelsValue() {\r\n    let models = 0;\r\n    for (let modelType of this.unitInfo.modelTypes) {\r\n      models += modelType.defaultAmount;\r\n    }\r\n    return models;\r\n  }\r\n}\r\n","export default class Model {\r\n\r\n  public name: string;\r\n  public modelInfo: any;\r\n  public points: number;\r\n  public selectedWeaponConfig: number; // TODO - multiple slots\r\n  public selectedAllegiance: number;\r\n\r\n  constructor(name: string, modelInfo: any) {\r\n    this.name = name;\r\n    this.modelInfo = modelInfo;\r\n    this.points = modelInfo.Points;\r\n    this.selectedWeaponConfig = 0;\r\n    this.selectedAllegiance = 0;\r\n  }\r\n}\r\n","import ListBuilder from \"../init\";\r\nimport Model from '../objects/model';\r\n\r\n// TODO:\r\n//  - Weapons are not showing\r\n//  - Delet and Edit only work on the lowest type category ???dafuq???\r\n\r\nexport default class Unit {\r\n\r\n  public id: number;\r\n  public faction: string;\r\n  public type: string;\r\n  public name: string;\r\n\r\n  public totalModels: number;\r\n  public totalPoints: number;\r\n  public totalPower: number;\r\n  public totalWounds: number;\r\n\r\n  public unitInfo: any;\r\n  public models: any;\r\n\r\n  constructor(unitId: number, faction: string, type: string, name: string) {\r\n    this.id = unitId;\r\n    this.faction = faction;\r\n    this.type = type;\r\n    this.name = name;\r\n\r\n    this.totalModels = 0;\r\n    this.totalPoints = 0;\r\n    this.totalPower = 0;\r\n    this.totalWounds = 0;\r\n\r\n    this.unitInfo = ListBuilder.data.data[faction].units[type][name];\r\n    this.models = {};\r\n\r\n    this.setupDefaultModels();\r\n    this.updateCosts();\r\n  }\r\n\r\n  public getUnitNameAndCostHTML(): string {\r\n    let costHTML =  'Points: ' + this.totalPoints\r\n                 +  ' | Power: ' + this.totalPower\r\n                 +  ' | Wounds: ' + this.totalWounds\r\n                 +  ' | Models: ' + this.totalModels;\r\n    let HTML = '<tr>'\r\n      + '<td class=\"name\" colspan=\"5\">' + this.name + '</td>'\r\n      + '<td class=\"cost\" colspan=\"5\">' + costHTML + '</td>'\r\n      + '</tr>';\r\n    \r\n    return HTML;\r\n  }\r\n\r\n  public getStatsHeadersHTML(): string {\r\n    let HTML = '<tr>'\r\n        + '<th class=\"statHeader\" id=\"name_H\">Name</th>'\r\n        + '<th class=\"statHeader\" id=\"m_H\">M</th>'\r\n        + '<th class=\"statHeader\" id=\"ws_H\">WS</th>'\r\n        + '<th class=\"statHeader\" id=\"bs_H\">BS</th>'\r\n        + '<th class=\"statHeader\" id=\"s_H\">S</th>'\r\n        + '<th class=\"statHeader\" id=\"t_H\">T</th>'\r\n        + '<th class=\"statHeader\" id=\"w_H\">W</th>'\r\n        + '<th class=\"statHeader\" id=\"a_H\">A</th>'\r\n        + '<th class=\"statHeader\" id=\"ld_H\">Ld</th>'\r\n        + '<th class=\"statHeader\" id=\"sv_H\">Sv</th>'\r\n        + '</tr>';\r\n    return HTML;\r\n  }\r\n\r\n  public getStatsHTML(): string {\r\n    let HTML = '';\r\n    for (let modelType in this.models) {\r\n      if (this.models[modelType].length > 0) {\r\n        let model = this.models[modelType][0];\r\n        let modelNumStr = '';\r\n        if (this.models[modelType].length > 1) {\r\n          modelNumStr = ' (' + this.models[modelType].length +')';\r\n        }\r\n        HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + model.name + modelNumStr + '</td>'\r\n          + '<td class=\"stat\" id=\"m\">' + this.getUnProfiledStats(model.modelInfo.M) + '</td>'\r\n          + '<td class=\"stat\" id=\"ws\">' + this.getUnProfiledStats(model.modelInfo.WS) + '</td>'\r\n          + '<td class=\"stat\" id=\"bs\">' + this.getUnProfiledStats(model.modelInfo.BS) + '</td>'\r\n          + '<td class=\"stat\" id=\"s\">' + this.getUnProfiledStats(model.modelInfo.S) + '</td>'\r\n          + '<td class=\"stat\" id=\"t\">' + this.getUnProfiledStats(model.modelInfo.T) + '</td>'\r\n          + '<td class=\"stat\" id=\"w\">' + this.getUnProfiledStats(model.modelInfo.W) + '</td>'\r\n          + '<td class=\"stat\" id=\"a\">' + this.getUnProfiledStats(model.modelInfo.A) +'</td>'\r\n          + '<td class=\"stat\" id=\"ld\">' + this.getUnProfiledStats(model.modelInfo.Ld) + '</td>'\r\n          + '<td class=\"stat\" id=\"sv\">' + this.getUnProfiledStats(model.modelInfo.Sv) + '</td>'\r\n          + '</tr>';\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  public getUnProfiledStats(stat) {\r\n    if (typeof stat === \"string\" || typeof stat === \"number\") {\r\n      return stat;\r\n    }\r\n    else {\r\n      let stats = '';\r\n      for (let i = 0; i < stat.length; i++) {\r\n        stats += '<b>' + stat[i].value + '</b> (' + stat[i].Wounds[0] + '-' + stat[i].Wounds[1] + ')<br/>';\r\n      }\r\n      return stats;\r\n    }\r\n  }\r\n\r\n  public getWeaponsHeadersHTML(): string {\r\n    let HTML = '<tr>'\r\n        + '<th class=\"leftHeader\">Weapon</th>'\r\n        + '<th>Range</th>'\r\n        + '<th>Type</th>'\r\n        + '<th>S</th>'\r\n        + '<th>AP</th>'\r\n        + '<th>D</th>'\r\n        + '<th colspan=\"4\">Abilities</th>'\r\n        + '</tr>';\r\n    return HTML;\r\n  }\r\n\r\n  public getWeaponsHTML(): string {\r\n    let listOfWeapons: Array<string> = [];\r\n    let amountsPerWeapon: Array<number> = [];\r\n    let HTML = '';\r\n    for (let modelType in this.models) {\r\n      for (let i = 0; i < this.models[modelType].length; i++) {\r\n        let weapons = this.models[modelType][i].modelInfo.Wargear.weapons[this.models[modelType][i].selectedWeaponConfig];\r\n        for (let weapon in weapons) {\r\n          if (listOfWeapons.indexOf(weapons[weapon]) === -1) {\r\n            listOfWeapons.push(weapons[weapon]);\r\n            amountsPerWeapon.push(1);\r\n          }\r\n          else {\r\n            amountsPerWeapon[listOfWeapons.indexOf(weapons[weapon])]++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let weaponIndex in listOfWeapons) {\r\n      let weapon = listOfWeapons[weaponIndex];\r\n      let weaponInfo = ListBuilder.data.data[this.faction].wargear[weapon];\r\n      let numberOf = '';\r\n      if (amountsPerWeapon[weaponIndex] > 1) {\r\n        numberOf = ' (' + amountsPerWeapon[weaponIndex] +')';\r\n      }\r\n      if (weaponInfo !== undefined) {\r\n        if (weaponInfo.WargearAbility !== undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"9\">' + weaponInfo.WargearAbility + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else if (weaponInfo.profiles === undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + numberOf +'</td>'\r\n          + '<td class=\"stat\" id=\"range\">' + weaponInfo.Range + '</td>'\r\n          + '<td class=\"stat\" id=\"type\">' + weaponInfo.Type + '</td>'\r\n          + '<td class=\"stat\" id=\"s\">' + weaponInfo.S + '</td>'\r\n          + '<td class=\"stat\" id=\"ap\">' + weaponInfo.AP + '</td>'\r\n          + '<td class=\"stat\" id=\"d\">' + weaponInfo.D + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + weaponInfo.Abilities + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else {\r\n          let desription = weaponInfo.description === undefined ? '' : weaponInfo.description;\r\n          HTML += '<tr class=\"profiledWeapon\">'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"description\" colspan=\"9\">' + desription + '</td>'\r\n          + '</tr>';\r\n          for (let profile in weaponInfo.profiles) {\r\n            let profileInfo = weaponInfo.profiles[profile];\r\n            if (profileInfo !== undefined) {\r\n              HTML += '<tr class=\"profile\">'\r\n              + '<td class=\"stat\" id=\"name\"> - ' + profile + '</td>'\r\n              + '<td class=\"stat\" id=\"range\">' + profileInfo.Range + '</td>'\r\n              + '<td class=\"stat\" id=\"type\">' + profileInfo.Type + '</td>'\r\n              + '<td class=\"stat\" id=\"s\">' + profileInfo.S + '</td>'\r\n              + '<td class=\"stat\" id=\"ap\">' + profileInfo.AP + '</td>'\r\n              + '<td class=\"stat\" id=\"d\">' + profileInfo.D + '</td>'\r\n              + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + profileInfo.Abilities + '</td>'\r\n              + '</tr>';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  public getAbilitiesHTML(): string {\r\n    let abilityHTML = '<tr class=\"abilities\"><th>Abilities</th><td colspan=\"9\">';\r\n    let abilityList: Array<any> = [];\r\n    for (let modelType in this.models) {\r\n      for (let i = 0; i < this.models[modelType].length; i++) {\r\n        let abilities = this.models[modelType][i].modelInfo.Abilities;\r\n        for (let ability in abilities) {\r\n          if (typeof abilities[ability] !== \"string\") {\r\n            for (let factionAbility in abilities[ability]) {\r\n              let htmlString = this.getFactionAbility(factionAbility);\r\n              if (abilityList.indexOf(htmlString) === -1) {\r\n                abilityList.push(htmlString);\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            let htmlString = '<b>' + ability + ':</b> ' + this.models[modelType][i].modelInfo.Abilities[ability] + '<br/>';\r\n            if (abilityList.indexOf(htmlString) === -1) {\r\n              abilityList.push(htmlString);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < abilityList.length; i++) {\r\n      abilityHTML += abilityList[i];\r\n      if (i < abilityList.length - 1) {\r\n        abilityHTML += '<br/>';\r\n      }\r\n    }\r\n    abilityHTML += '</td></tr>';\r\n    return abilityHTML;\r\n  }\r\n\r\n  public getFactionAbility(id) {\r\n    return '<b>' + ListBuilder.data.data[this.faction].factionSpecialRules[id].name + '</b>: '\r\n    + ListBuilder.data.data[this.faction].factionSpecialRules[id].description + '<br/>';\r\n  }\r\n\r\n  public getPsykerHTML(): string {\r\n    let psykerHTML = '';\r\n    for (let modelType in this.models) {\r\n      if (this.models[modelType].length > 0 && this.models[modelType][0].modelInfo.Psyker !== undefined) {\r\n        psykerHTML += '<tr class=\"psykerAbilities\"><th>Psyker</th>'\r\n          + '<td colspan=\"9\">' + this.models[modelType][0].modelInfo.Psyker\r\n          + '</td></tr>';\r\n      }\r\n    }\r\n    return psykerHTML;\r\n  }\r\n\r\n  public getAllegianceHTML(): string {\r\n    let allegianceHTML = '';\r\n    for (let modelType in this.models) {\r\n      if (this.models[modelType].length > 0) {\r\n        if (this.models[modelType][0].modelInfo.Allegiance !== undefined) {\r\n          allegianceHTML += '<tr class=\"allegiance\"><th>Allegiance</th><td colspan=\"9\">' + this.models[modelType][0].modelInfo.Allegiance[this.models[modelType][0].selectedAllegiance] + '</td></tr>';\r\n          return allegianceHTML;\r\n        }\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public getKeywordsHTML(): string {\r\n    let keywords: Array<any> = [];\r\n    for (let modelType in this.models) {\r\n      if (this.models[modelType].length > 0) {\r\n        for (let i = 0; i < this.models[modelType][0].modelInfo[\"Faction Keywords\"].length; i++) {\r\n          let keyword = this.models[modelType][0].modelInfo[\"Faction Keywords\"][i].toUpperCase();\r\n          if (keywords.indexOf(keyword) === -1) {\r\n            keywords.push(keyword);\r\n          }\r\n        }\r\n        for (let i = 0; i < this.models[modelType][0].modelInfo.Keywords.length; i++) {\r\n          let keyword = this.models[modelType][0].modelInfo.Keywords[i].toUpperCase();\r\n          if (keywords.indexOf(keyword) === -1) {\r\n            keywords.push(keyword);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let keywordHTML = '<tr class=\"keywords\"><th>Keywords</th><td colspan=\"9\">';\r\n    for (let keyword of keywords) {\r\n      if (keywords.indexOf(keyword) < keywords.length - 1) {\r\n        keywordHTML += keyword + ', ';\r\n      }\r\n      else {\r\n        keywordHTML += keyword;\r\n      }\r\n    }\r\n    keywordHTML += '</td></tr>';\r\n    return keywordHTML;\r\n  }\r\n\r\n  public updateCosts() {\r\n    this.calculateModels();\r\n    this.calculateWounds();\r\n    this.calculatePoints();\r\n    this.calculatePower();\r\n  }\r\n\r\n  private calculateModels() {\r\n    let models = 0;\r\n    for (let modelType in this.models) {\r\n      for (let modelIndex in this.models[modelType]) {\r\n        models++;\r\n      }\r\n    }\r\n    this.totalModels = models;\r\n  }\r\n\r\n  private calculateWounds() {\r\n    let wounds = 0;\r\n    for (let modelType in this.models) {\r\n      for (let modelIndex in this.models[modelType]) {\r\n        wounds += this.models[modelType][modelIndex].modelInfo.W;\r\n      }\r\n    }\r\n    this.totalWounds = wounds;\r\n  }\r\n\r\n  private calculatePoints() {\r\n    let points = 0;\r\n    for (let modelType in this.models) {\r\n      for (let modelIndex in this.models[modelType]) {\r\n        let model = this.models[modelType][modelIndex];\r\n        points += model.modelInfo.Points;\r\n        if (!model.modelInfo.PointsIncludesWargear) {\r\n          if(model.modelInfo.Wargear.weapons) {\r\n            let selectedWeapons = model.modelInfo.Wargear.weapons[model.selectedWeaponConfig];\r\n            for (let weapon = 0; weapon < selectedWeapons.length; weapon++) {\r\n              points += ListBuilder.data.data[this.faction].wargear[selectedWeapons[weapon]].Points;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.totalPoints = points;\r\n  }\r\n\r\n  private calculatePower() {\r\n    let power = 0;\r\n    for (let i = this.unitInfo.power.length - 1; i >= 0; i--) {\r\n      if (this.totalModels >= this.unitInfo.power[i][0]) {\r\n        power = this.unitInfo.power[i][1];\r\n        break;\r\n      }\r\n    }\r\n    this.totalPower = power;\r\n  }\r\n\r\n  private setupDefaultModels() {\r\n    for (let modelType in this.unitInfo.modelTypes) {\r\n      let model = this.unitInfo.modelTypes[modelType].model;\r\n      this.models[model] = [];\r\n      let modelInfo = ListBuilder.data.data[this.faction].models[model];\r\n      if (modelInfo !== undefined) {\r\n        for (let num = 0; num < this.unitInfo.modelTypes[modelType].defaultAmount; num++) {\r\n          let newModel = new Model(model, modelInfo);\r\n          this.models[model].push(newModel);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* \r\n  addModel(modelType) {\r\n    let model = this.unitInfo.modelTypes[modelType].model;\r\n    let modelInfo = factionList[this.faction].models[model];\r\n    if (modelInfo !== undefined) {\r\n      let newModel = new Model(model, modelInfo);\r\n      this.models[model].push(newModel);\r\n    }\r\n    this.updateCosts();\r\n    list.updateCosts();\r\n    editor.renderEdit();\r\n  }\r\n\r\n  removeModel(modelType) {\r\n    let model = this.unitInfo.modelTypes[modelType].model;\r\n    if (this.models[model].length > 1) {\r\n      this.models[model].pop();\r\n    }\r\n    else {\r\n      this.models[model] = [];\r\n    }\r\n    this.updateCosts();\r\n    list.updateCosts();\r\n    editor.renderEdit();\r\n  }\r\n\r\n  updateModelWargear(modelType, modelIndex, selectedWeaponConfig) {\r\n    let model = this.unitInfo.modelTypes[modelType].model;\r\n    this.models[model][modelIndex].selectedWeaponConfig = selectedWeaponConfig;\r\n    this.updateCosts();\r\n    list.updateCosts();\r\n    editor.renderEdit();\r\n  }\r\n\r\n  updateAllegiance(index) {\r\n    for (let modelType in this.models) {\r\n      for (let modelIndex in this.models[modelType]) {\r\n        let model = this.models[modelType][modelIndex];\r\n        model.selectedAllegiance = index;\r\n      }\r\n    }\r\n  }\r\n\r\n  getStatsHTML() {\r\n    let HTML = '';\r\n    for (var modelType in this.models) {\r\n      if (this.models[modelType].length > 0) {\r\n        var model = this.models[modelType][0];\r\n        var modelNumStr = '';\r\n        if (this.models[modelType].length > 1) {\r\n          modelNumStr = ' (' + this.models[modelType].length +')';\r\n        }\r\n        HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + model.name + modelNumStr + '</td>'\r\n          + '<td class=\"stat\" id=\"m\">' + this.getUnProfiledStats(model.modelInfo.M) + '</td>'\r\n          + '<td class=\"stat\" id=\"ws\">' + this.getUnProfiledStats(model.modelInfo.WS) + '</td>'\r\n          + '<td class=\"stat\" id=\"bs\">' + this.getUnProfiledStats(model.modelInfo.BS) + '</td>'\r\n          + '<td class=\"stat\" id=\"s\">' + this.getUnProfiledStats(model.modelInfo.S) + '</td>'\r\n          + '<td class=\"stat\" id=\"t\">' + this.getUnProfiledStats(model.modelInfo.T) + '</td>'\r\n          + '<td class=\"stat\" id=\"w\">' + this.getUnProfiledStats(model.modelInfo.W) + '</td>'\r\n          + '<td class=\"stat\" id=\"a\">' + this.getUnProfiledStats(model.modelInfo.A) +'</td>'\r\n          + '<td class=\"stat\" id=\"ld\">' + this.getUnProfiledStats(model.modelInfo.Ld) + '</td>'\r\n          + '<td class=\"stat\" id=\"sv\">' + this.getUnProfiledStats(model.modelInfo.Sv) + '</td>'\r\n          + '</tr>';\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  getUnProfiledStats(stat) {\r\n    if (typeof stat === \"string\" || typeof stat === \"number\") {\r\n      return stat;\r\n    }\r\n    else {\r\n      var stats = '';\r\n      for (var i = 0; i < stat.length; i++) {\r\n        stats += '<b>' + stat[i].value + '</b> (' + stat[i].Wounds[0] + '-' + stat[i].Wounds[1] + ')<br/>';\r\n      }\r\n      return stats;\r\n    }\r\n  }\r\n\r\n  getWeaponsHeadersHTML() {\r\n    let HTML = '<tr>'\r\n        + '<th class=\"leftHeader\">Weapon</th>'\r\n        + '<th>Range</th>'\r\n        + '<th>Type</th>'\r\n        + '<th>S</th>'\r\n        + '<th>AP</th>'\r\n        + '<th>D</th>'\r\n        + '<th colspan=\"4\">Abilities</th>'\r\n        + '</tr>';\r\n\r\n    return HTML;\r\n  }\r\n\r\n  getWeaponsHTML() {\r\n    var listOfWeapons = [];\r\n    let HTML = '';\r\n    for (var modelType in this.models) {\r\n      for (var i = 0; i < this.models[modelType].length; i++) {\r\n        var weapons = this.models[modelType][i].modelInfo.Wargear.weapons[this.models[modelType][i].selectedWeaponConfig];\r\n        for (var weapon of weapons) {\r\n          if (listOfWeapons.indexOf(weapon) === -1) {\r\n            listOfWeapons.push(weapon);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (var weapon of listOfWeapons) {\r\n      var weaponInfo = factionList[this.faction].wargear[weapon];\r\n      if (weaponInfo !== undefined) {\r\n        if (weaponInfo.WargearAbility !== undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"9\">' + weaponInfo.WargearAbility + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else if (weaponInfo.profiles === undefined) {\r\n          HTML += '<tr>'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"range\">' + weaponInfo.Range + '</td>'\r\n          + '<td class=\"stat\" id=\"type\">' + weaponInfo.Type + '</td>'\r\n          + '<td class=\"stat\" id=\"s\">' + weaponInfo.S + '</td>'\r\n          + '<td class=\"stat\" id=\"ap\">' + weaponInfo.AP + '</td>'\r\n          + '<td class=\"stat\" id=\"d\">' + weaponInfo.D + '</td>'\r\n          + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + weaponInfo.Abilities + '</td>'\r\n          + '</tr>';\r\n        }\r\n        else {\r\n          let desription = weaponInfo.description === undefined ? '' : weaponInfo.description;\r\n          HTML += '<tr class=\"profiledWeapon\">'\r\n          + '<td class=\"stat\" id=\"name\">' + weapon + '</td>'\r\n          + '<td class=\"stat\" id=\"description\" colspan=\"9\">' + desription + '</td>'\r\n          + '</tr>';\r\n          for (var profile in weaponInfo.profiles) {\r\n            var profileInfo = weaponInfo.profiles[profile];\r\n            if (profileInfo !== undefined) {\r\n              HTML += '<tr class=\"profile\">'\r\n              + '<td class=\"stat\" id=\"name\"> - ' + profile + '</td>'\r\n              + '<td class=\"stat\" id=\"range\">' + profileInfo.Range + '</td>'\r\n              + '<td class=\"stat\" id=\"type\">' + profileInfo.Type + '</td>'\r\n              + '<td class=\"stat\" id=\"s\">' + profileInfo.S + '</td>'\r\n              + '<td class=\"stat\" id=\"ap\">' + profileInfo.AP + '</td>'\r\n              + '<td class=\"stat\" id=\"d\">' + profileInfo.D + '</td>'\r\n              + '<td class=\"stat\" id=\"abilities\" colspan=\"4\">' + profileInfo.Abilities + '</td>'\r\n              + '</tr>';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return HTML;\r\n  }\r\n\r\n  getAbilitiesHTML() {\r\n    var abilityHTML = '<tr class=\"abilities\"><th>Abilities</th><td colspan=\"9\">';\r\n    var abilityList = [];\r\n    for (var modelType in this.models) {\r\n      for (var i = 0; i < this.models[modelType].length; i++) {\r\n        var abilities = this.models[modelType][i].modelInfo.Abilities;\r\n        for (var ability in abilities) {\r\n          if (typeof abilities[ability] !== \"string\") {\r\n            for (var factionAbility in abilities[ability]) {\r\n              let htmlString = this.getFactionAbility(factionAbility);\r\n              if (abilityList.indexOf(htmlString) === -1) {\r\n                abilityList.push(htmlString);\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            let htmlString = '<b>' + ability + ':</b> ' + this.models[modelType][i].modelInfo.Abilities[ability] + '<br/>';\r\n            if (abilityList.indexOf(htmlString) === -1) {\r\n              abilityList.push(htmlString);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < abilityList.length; i++) {\r\n      abilityHTML += abilityList[i];\r\n      if (i < abilityList.length - 1) {\r\n        abilityHTML += '<br/>';\r\n      }\r\n    }\r\n    abilityHTML += '</td></tr>';\r\n    return abilityHTML;\r\n  }\r\n\r\n  getFactionAbility(id) {\r\n    return '<b>' + factionList[this.faction].factionSpecialRules[id].name + '</b>: '\r\n    + factionList[this.faction].factionSpecialRules[id].description + '<br/>';\r\n  }\r\n\r\n  getPsykerHTML() {\r\n    let psykerHTML = '';\r\n    for (var modelType in this.models) {\r\n      if (this.models[modelType].length > 0 && this.models[modelType][0].modelInfo.Psyker !== undefined) {\r\n        psykerHTML += '<tr class=\"psykerAbilities\"><th>Psyker</th>'\r\n          + '<td colspan=\"9\">' + this.models[modelType][0].modelInfo.Psyker\r\n          + '</td></tr>';\r\n      }\r\n    }\r\n    return psykerHTML;\r\n  }\r\n\r\n  getAllegianceHTML() {\r\n    let allegianceHTML = '';\r\n    for (var modelType in this.models) {\r\n      if (this.models[modelType].length > 0) {\r\n        if (this.models[modelType][0].modelInfo.Allegiance !== undefined) {\r\n          allegianceHTML += '<tr class=\"allegiance\"><th>Allegiance</th><td colspan=\"9\">' + this.models[modelType][0].modelInfo.Allegiance[this.models[modelType][0].selectedAllegiance] + '</td></tr>';\r\n          return allegianceHTML;\r\n        }\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getKeywordsHTML() {\r\n    let keywords = [];\r\n    for (var modelType in this.models) {\r\n      if (this.models[modelType].length > 0) {\r\n        for (var i = 0; i < this.models[modelType][0].modelInfo[\"Faction Keywords\"].length; i++) {\r\n          var keyword = this.models[modelType][0].modelInfo[\"Faction Keywords\"][i].toUpperCase();\r\n          if (keywords.indexOf(keyword) === -1) {\r\n            keywords.push(keyword);\r\n          }\r\n        }\r\n        for (var i = 0; i < this.models[modelType][0].modelInfo[\"Keywords\"].length; i++) {\r\n          var keyword = this.models[modelType][0].modelInfo[\"Keywords\"][i].toUpperCase();\r\n          if (keywords.indexOf(keyword) === -1) {\r\n            keywords.push(keyword);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var keywordHTML = '<tr class=\"keywords\"><th>Keywords</th><td colspan=\"9\">';\r\n    for (var keyword of keywords) {\r\n      if (keywords.indexOf(keyword) < keywords.length - 1) {\r\n        keywordHTML += keyword + ', ';\r\n      }\r\n      else {\r\n        keywordHTML += keyword;\r\n      }\r\n    }\r\n    keywordHTML += '</td></tr>';\r\n    return keywordHTML;\r\n  } */\r\n}\r\n","let Settings = {\r\n  supportedFactions: [\r\n    'Craftworlds',\r\n    'Harlequins',\r\n    'Ynnari'\r\n  ]\r\n};\r\n\r\nexport default Settings;\r\n","export default class Costs {\r\n\r\n  // cost values\r\n  public costs: Array<number>;\r\n\r\n  // elements\r\n  private pointsElement: HTMLElement;\r\n  private powerElement: HTMLElement;\r\n  private woundsElement: HTMLElement;\r\n  private modelsElement: HTMLElement;\r\n\r\n  constructor() {\r\n    this.costs = [0,0,0,0];\r\n    this.pointsElement = document.getElementById(\"POINTS\") as HTMLElement;\r\n    this.powerElement = document.getElementById(\"POWER\") as HTMLElement;\r\n    this.woundsElement = document.getElementById(\"WOUNDS\") as HTMLElement;\r\n    this.modelsElement = document.getElementById(\"MODELS\") as HTMLElement;\r\n    this.updateCosts();\r\n  }\r\n\r\n  public updateCostsExt(costs: Array<number>) {\r\n    this.costs[0] = costs[0];\r\n    this.costs[1] = costs[1];\r\n    this.costs[2] = costs[2];\r\n    this.costs[3] = costs[3];\r\n    this.updateCosts();\r\n  }\r\n\r\n  private updateCosts() {\r\n    this.pointsElement.innerHTML = '<div class=\"costValue\">' + this.costs[0] + '</div>' + 'POINTS';\r\n    this.powerElement.innerHTML = '<div class=\"displayedCostSmall\">Power: ' + this.costs[1] + '</div>';\r\n    this.woundsElement.innerHTML = '<div class=\"displayedCostSmall\">Wounds: ' + this.costs[2] + '</div>';\r\n    this.modelsElement.innerHTML = '<div class=\"displayedCostSmall\">Models: ' + this.costs[3] + '</div>';\r\n  }\r\n}\r\n"]}